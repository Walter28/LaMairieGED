{"version":3,"file":"diffDOM.js","sources":["../node_modules/tslib/tslib.es6.js","../src/diffDOM/helpers.ts","../src/diffDOM/dom/fromVirtual.ts","../src/diffDOM/dom/apply.ts","../src/diffDOM/dom/undo.ts","../src/diffDOM/virtual/helpers.ts","../src/diffDOM/virtual/apply.ts","../src/diffDOM/virtual/fromDOM.ts","../src/diffDOM/virtual/fromString.ts","../src/diffDOM/virtual/diff.ts","../src/diffDOM/index.ts","../src/TraceLogger.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","import { elementNodeType } from \"./types\"\n\nexport class Diff {\n    constructor(options = {}) {\n        Object.entries(options).forEach(([key, value]) => (this[key] = value))\n    }\n\n    toString() {\n        return JSON.stringify(this)\n    }\n\n    setValue(\n        aKey: string | number,\n        aValue:\n            | string\n            | number\n            | boolean\n            | number[]\n            | { [key: string]: string | { [key: string]: string } }\n            | elementNodeType,\n    ) {\n        this[aKey] = aValue\n        return this\n    }\n}\n\nexport function checkElementType(element, ...elementTypeNames: string[]) {\n    if (typeof element === \"undefined\" || element === null) {\n        return false\n    }\n    return elementTypeNames.some(\n        (elementTypeName) =>\n            // We need to check if the specified type is defined\n            // because otherwise instanceof throws an exception.\n            typeof element?.ownerDocument?.defaultView?.[elementTypeName] ===\n                \"function\" &&\n            element instanceof\n                element.ownerDocument.defaultView[elementTypeName],\n    )\n}\n","import { DiffDOMOptions, elementNodeType, textNodeType } from \"../types\"\nimport { checkElementType } from \"../helpers\"\n\nexport function objToNode(\n    objNode: elementNodeType,\n    insideSvg: boolean,\n    options: DiffDOMOptions,\n) {\n    let node: Element | Text | Comment\n    if (objNode.nodeName === \"#text\") {\n        node = options.document.createTextNode((objNode as textNodeType).data)\n    } else if (objNode.nodeName === \"#comment\") {\n        node = options.document.createComment((objNode as textNodeType).data)\n    } else {\n        if (insideSvg) {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                objNode.nodeName,\n            )\n            if (objNode.nodeName === \"foreignObject\") {\n                insideSvg = false\n            }\n        } else if (objNode.nodeName.toLowerCase() === \"svg\") {\n            node = options.document.createElementNS(\n                \"http://www.w3.org/2000/svg\",\n                \"svg\",\n            )\n            insideSvg = true\n        } else {\n            node = options.document.createElement(objNode.nodeName)\n        }\n        if (objNode.attributes) {\n            Object.entries(objNode.attributes).forEach(([key, value]) =>\n                (node as Element).setAttribute(key, value),\n            )\n        }\n        if (objNode.childNodes) {\n            node = node as Element\n            objNode.childNodes.forEach(\n                (childNode: elementNodeType | textNodeType) =>\n                    node.appendChild(objToNode(childNode, insideSvg, options)),\n            )\n        }\n        if (options.valueDiffing) {\n            if (\n                objNode.value &&\n                checkElementType(\n                    node,\n                    \"HTMLButtonElement\",\n                    \"HTMLDataElement\",\n                    \"HTMLInputElement\",\n                    \"HTMLLIElement\",\n                    \"HTMLMeterElement\",\n                    \"HTMLOptionElement\",\n                    \"HTMLProgressElement\",\n                    \"HTMLParamElement\",\n                )\n            ) {\n                ;(\n                    node as\n                        | HTMLButtonElement\n                        | HTMLDataElement\n                        | HTMLInputElement\n                        | HTMLLIElement\n                        | HTMLMeterElement\n                        | HTMLOptionElement\n                        | HTMLProgressElement\n                        | HTMLParamElement\n                ).value = objNode.value\n            }\n            if (objNode.checked && checkElementType(node, \"HTMLInputElement\")) {\n                ;(node as HTMLInputElement).checked = objNode.checked\n            }\n            if (\n                objNode.selected &&\n                checkElementType(node, \"HTMLOptionElement\")\n            ) {\n                ;(node as HTMLOptionElement).selected = objNode.selected\n            }\n        }\n    }\n    return node\n}\n","import { DiffDOMOptions, diffType, nodeType } from \"../types\"\nimport { Diff, checkElementType } from \"../helpers\"\n\nimport { objToNode } from \"./fromVirtual\"\n\n// ===== Apply a diff =====\n\nconst getFromRoute = (\n    node: Element,\n    route: number[],\n): Element | Text | false => {\n    route = route.slice()\n    while (route.length > 0) {\n        const c = route.splice(0, 1)[0]\n        node = node.childNodes[c] as Element\n    }\n    return node\n}\n\nexport function applyDiff(\n    tree: Element,\n    diff: diffType,\n    options: DiffDOMOptions, // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    const action = diff[options._const.action] as string | number\n    const route = diff[options._const.route] as number[]\n    let node\n\n    if (\n        ![options._const.addElement, options._const.addTextElement].includes(\n            action,\n        )\n    ) {\n        // For adding nodes, we calculate the route later on. It's different because it includes the position of the newly added item.\n        node = getFromRoute(tree, route)\n    }\n\n    let newNode\n    let reference: Element\n    let nodeArray\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preDiffApply(info)) {\n        return true\n    }\n\n    switch (action) {\n        case options._const.addAttribute:\n            if (!node || !checkElementType(node, \"Element\")) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name] as string,\n                diff[options._const.value] as string,\n            )\n            break\n        case options._const.modifyAttribute:\n            if (!node || !checkElementType(node, \"Element\")) {\n                return false\n            }\n            node.setAttribute(\n                diff[options._const.name] as string,\n                diff[options._const.newValue] as string,\n            )\n            if (\n                checkElementType(node, \"HTMLInputElement\") &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.newValue] as string\n            }\n            break\n        case options._const.removeAttribute:\n            if (!node || !checkElementType(node, \"Element\")) {\n                return false\n            }\n            node.removeAttribute(diff[options._const.name] as string)\n            break\n        case options._const.modifyTextElement:\n            if (!node || !checkElementType(node, \"Text\")) {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue] as string,\n                diff[options._const.newValue] as string,\n            )\n            if (checkElementType(node.parentNode, \"HTMLTextAreaElement\")) {\n                node.parentNode.value = diff[options._const.newValue] as string\n            }\n            break\n        case options._const.modifyValue:\n            if (!node || typeof node.value === \"undefined\") {\n                return false\n            }\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            if (!node || !checkElementType(node, \"Comment\")) {\n                return false\n            }\n            options.textDiff(\n                node,\n                node.data,\n                diff[options._const.oldValue] as string,\n                diff[options._const.newValue] as string,\n            )\n            break\n        case options._const.modifyChecked:\n            if (!node || typeof node.checked === \"undefined\") {\n                return false\n            }\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            if (!node || typeof node.selected === \"undefined\") {\n                return false\n            }\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement: {\n            const insideSvg =\n                (\n                    diff[options._const.newValue] as nodeType\n                ).nodeName.toLowerCase() === \"svg\" ||\n                node.parentNode.namespaceURI === \"http://www.w3.org/2000/svg\"\n            node.parentNode.replaceChild(\n                objToNode(\n                    diff[options._const.newValue] as nodeType,\n                    insideSvg,\n                    options,\n                ),\n                node,\n            )\n            break\n        }\n        case options._const.relocateGroup:\n            nodeArray = [...new Array(diff[options._const.groupLength])].map(\n                () =>\n                    node.removeChild(\n                        node.childNodes[diff[options._const.from] as number],\n                    ),\n            )\n            nodeArray.forEach((childNode, index) => {\n                if (index === 0) {\n                    reference =\n                        node.childNodes[diff[options._const.to] as number]\n                }\n                node.insertBefore(childNode, reference || null)\n            })\n            break\n        case options._const.removeElement:\n            node.parentNode.removeChild(node)\n            break\n        case options._const.addElement: {\n            const parentRoute = route.slice()\n            const c: number = parentRoute.splice(parentRoute.length - 1, 1)[0]\n            node = getFromRoute(tree, parentRoute)\n            if (!checkElementType(node, \"Element\")) {\n                return false\n            }\n            node.insertBefore(\n                objToNode(\n                    diff[options._const.element] as nodeType,\n                    node.namespaceURI === \"http://www.w3.org/2000/svg\",\n                    options,\n                ),\n                node.childNodes[c] || null,\n            )\n            break\n        }\n        case options._const.removeTextElement: {\n            if (!node || node.nodeType !== 3) {\n                return false\n            }\n            const parentNode = node.parentNode\n            parentNode.removeChild(node)\n            if (checkElementType(parentNode, \"HTMLTextAreaElement\")) {\n                parentNode.value = \"\"\n            }\n            break\n        }\n        case options._const.addTextElement: {\n            const parentRoute = route.slice()\n            const c: number = parentRoute.splice(parentRoute.length - 1, 1)[0]\n            newNode = options.document.createTextNode(\n                diff[options._const.value] as string,\n            )\n            node = getFromRoute(tree, parentRoute)\n            if (!node.childNodes) {\n                return false\n            }\n            node.insertBefore(newNode, node.childNodes[c] || null)\n            if (checkElementType(node.parentNode, \"HTMLTextAreaElement\")) {\n                node.parentNode.value = diff[options._const.value] as string\n            }\n            break\n        }\n        default:\n            console.log(\"unknown action\")\n    }\n\n    // if a new node was created, we might be interested in its\n    // post diff hook\n    options.postDiffApply({\n        diff: info.diff,\n        node: info.node,\n        newNode,\n    })\n\n    return true\n}\n\nexport function applyDOM(\n    tree: Element,\n    diffs: (Diff | diffType)[],\n    options: DiffDOMOptions,\n) {\n    return diffs.every((diff: Diff | diffType) =>\n        applyDiff(tree, diff as diffType, options),\n    )\n}\n","import { DiffDOMOptions, diffType } from \"../types\"\nimport { Diff } from \"../helpers\"\nimport { applyDiff } from \"./apply\"\n\n// ===== Undo a diff =====\n\nfunction swap(obj: object, p1: string | number, p2: string | number) {\n    const tmp = obj[p1]\n    obj[p1] = obj[p2]\n    obj[p2] = tmp\n}\n\nfunction undoDiff(\n    tree: Element,\n    diff: diffType,\n    options: DiffDOMOptions, // {preDiffApply, postDiffApply, textDiff, valueDiffing, _const}\n) {\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            diff[options._const.action] = options._const.removeAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyAttribute:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeAttribute:\n            diff[options._const.action] = options._const.addAttribute\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyTextElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyValue:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyComment:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifyChecked:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.modifySelected:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.replaceElement:\n            swap(diff, options._const.oldValue, options._const.newValue)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.relocateGroup:\n            swap(diff, options._const.from, options._const.to)\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeElement:\n            diff[options._const.action] = options._const.addElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addElement:\n            diff[options._const.action] = options._const.removeElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.removeTextElement:\n            diff[options._const.action] = options._const.addTextElement\n            applyDiff(tree, diff, options)\n            break\n        case options._const.addTextElement:\n            diff[options._const.action] = options._const.removeTextElement\n            applyDiff(tree, diff, options)\n            break\n        default:\n            console.log(\"unknown action\")\n    }\n}\n\nexport function undoDOM(\n    tree: Element,\n    diffs: (diffType | Diff)[],\n    options: DiffDOMOptions,\n) {\n    diffs = diffs.slice()\n    diffs.reverse()\n    diffs.forEach((diff: diffType | Diff) => {\n        undoDiff(tree, diff as diffType, options)\n    })\n}\n","import {\n    diffNodeType,\n    elementDiffNodeType,\n    elementNodeType,\n    nodeType,\n    subsetType,\n    textDiffNodeType,\n    textNodeType,\n} from \"../types\"\nimport { Diff } from \"../helpers\"\nconst elementDescriptors = (el: diffNodeType) => {\n    const output = []\n    output.push(el.nodeName)\n    if (el.nodeName !== \"#text\" && el.nodeName !== \"#comment\") {\n        el = el as elementDiffNodeType\n        if (el.attributes) {\n            if (el.attributes[\"class\"]) {\n                output.push(\n                    `${el.nodeName}.${el.attributes[\"class\"].replace(\n                        / /g,\n                        \".\",\n                    )}`,\n                )\n            }\n            if (el.attributes.id) {\n                output.push(`${el.nodeName}#${el.attributes.id}`)\n            }\n        }\n    }\n    return output\n}\n\nconst findUniqueDescriptors = (li: diffNodeType[]) => {\n    const uniqueDescriptors = {}\n    const duplicateDescriptors = {}\n\n    li.forEach((node: nodeType) => {\n        elementDescriptors(node).forEach((descriptor) => {\n            const inUnique = descriptor in uniqueDescriptors\n            const inDupes = descriptor in duplicateDescriptors\n            if (!inUnique && !inDupes) {\n                uniqueDescriptors[descriptor] = true\n            } else if (inUnique) {\n                delete uniqueDescriptors[descriptor]\n                duplicateDescriptors[descriptor] = true\n            }\n        })\n    })\n\n    return uniqueDescriptors\n}\n\nexport const uniqueInBoth = (l1: diffNodeType[], l2: diffNodeType[]) => {\n    const l1Unique = findUniqueDescriptors(l1)\n    const l2Unique = findUniqueDescriptors(l2)\n    const inBoth = {}\n\n    Object.keys(l1Unique).forEach((key) => {\n        if (l2Unique[key]) {\n            inBoth[key] = true\n        }\n    })\n\n    return inBoth\n}\n\nexport const removeDone = (tree: elementDiffNodeType) => {\n    delete tree.outerDone\n    delete tree.innerDone\n    delete tree.valueDone\n    if (tree.childNodes) {\n        return tree.childNodes.every(removeDone)\n    } else {\n        return true\n    }\n}\n\nexport const cleanNode = (diffNode: diffNodeType) => {\n    if (Object.prototype.hasOwnProperty.call(diffNode, \"data\")) {\n        const textNode: textNodeType = {\n            nodeName: diffNode.nodeName === \"#text\" ? \"#text\" : \"#comment\",\n            data: (diffNode as textDiffNodeType).data,\n        }\n        return textNode\n    } else {\n        const elementNode: elementNodeType = {\n            nodeName: diffNode.nodeName,\n        }\n        diffNode = diffNode as elementDiffNodeType\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"attributes\")) {\n            elementNode.attributes = { ...diffNode.attributes }\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"checked\")) {\n            elementNode.checked = diffNode.checked\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"value\")) {\n            elementNode.value = diffNode.value\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"selected\")) {\n            elementNode.selected = diffNode.selected\n        }\n        if (Object.prototype.hasOwnProperty.call(diffNode, \"childNodes\")) {\n            elementNode.childNodes = diffNode.childNodes.map((diffChildNode) =>\n                cleanNode(diffChildNode),\n            )\n        }\n        return elementNode\n    }\n}\n\nexport const isEqual = (e1: diffNodeType, e2: diffNodeType) => {\n    if (\n        ![\"nodeName\", \"value\", \"checked\", \"selected\", \"data\"].every(\n            (element) => {\n                if (e1[element] !== e2[element]) {\n                    return false\n                }\n                return true\n            },\n        )\n    ) {\n        return false\n    }\n    if (Object.prototype.hasOwnProperty.call(e1, \"data\")) {\n        // Comment or Text\n        return true\n    }\n    e1 = e1 as elementDiffNodeType\n    e2 = e2 as elementDiffNodeType\n    if (Boolean(e1.attributes) !== Boolean(e2.attributes)) {\n        return false\n    }\n\n    if (Boolean(e1.childNodes) !== Boolean(e2.childNodes)) {\n        return false\n    }\n    if (e1.attributes) {\n        const e1Attributes = Object.keys(e1.attributes)\n        const e2Attributes = Object.keys(e2.attributes)\n\n        if (e1Attributes.length !== e2Attributes.length) {\n            return false\n        }\n        if (\n            !e1Attributes.every((attribute) => {\n                if (\n                    (e1 as elementDiffNodeType).attributes[attribute] !==\n                    (e2 as elementDiffNodeType).attributes[attribute]\n                ) {\n                    return false\n                }\n                return true\n            })\n        ) {\n            return false\n        }\n    }\n    if (e1.childNodes) {\n        if (e1.childNodes.length !== e2.childNodes.length) {\n            return false\n        }\n        if (\n            !e1.childNodes.every((childNode: nodeType, index: number) =>\n                isEqual(childNode, e2.childNodes[index]),\n            )\n        ) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport const roughlyEqual = (\n    e1: diffNodeType,\n    e2: diffNodeType,\n    uniqueDescriptors: { [key: string]: boolean },\n    sameSiblings: boolean,\n    preventRecursion = false,\n) => {\n    if (!e1 || !e2) {\n        return false\n    }\n\n    if (e1.nodeName !== e2.nodeName) {\n        return false\n    }\n\n    if ([\"#text\", \"#comment\"].includes(e1.nodeName)) {\n        // Note that we initially don't care what the text content of a node is,\n        // the mere fact that it's the same tag and \"has text\" means it's roughly\n        // equal, and then we can find out the true text difference later.\n        return preventRecursion\n            ? true\n            : (e1 as textDiffNodeType).data === (e2 as textDiffNodeType).data\n    }\n\n    e1 = e1 as elementDiffNodeType\n    e2 = e2 as elementDiffNodeType\n\n    if (e1.nodeName in uniqueDescriptors) {\n        return true\n    }\n\n    if (e1.attributes && e2.attributes) {\n        if (e1.attributes.id) {\n            if (e1.attributes.id !== e2.attributes.id) {\n                return false\n            } else {\n                const idDescriptor = `${e1.nodeName}#${e1.attributes.id}`\n                if (idDescriptor in uniqueDescriptors) {\n                    return true\n                }\n            }\n        }\n        if (\n            e1.attributes[\"class\"] &&\n            e1.attributes[\"class\"] === e2.attributes[\"class\"]\n        ) {\n            const classDescriptor = `${e1.nodeName}.${e1.attributes[\n                \"class\"\n            ].replace(/ /g, \".\")}`\n            if (classDescriptor in uniqueDescriptors) {\n                return true\n            }\n        }\n    }\n\n    if (sameSiblings) {\n        return true\n    }\n\n    const nodeList1 = e1.childNodes ? e1.childNodes.slice().reverse() : []\n    const nodeList2 = e2.childNodes ? e2.childNodes.slice().reverse() : []\n\n    if (nodeList1.length !== nodeList2.length) {\n        return false\n    }\n\n    if (preventRecursion) {\n        return nodeList1.every(\n            (element: nodeType, index: number) =>\n                element.nodeName === nodeList2[index].nodeName,\n        )\n    } else {\n        // note: we only allow one level of recursion at any depth. If 'preventRecursion'\n        // was not set, we must explicitly force it to true for child iterations.\n        const childUniqueDescriptors = uniqueInBoth(nodeList1, nodeList2)\n        return nodeList1.every((element: nodeType, index: number) =>\n            roughlyEqual(\n                element,\n                nodeList2[index],\n                childUniqueDescriptors,\n                true,\n                true,\n            ),\n        )\n    }\n}\n\n/**\n * based on https://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Longest_common_substring#JavaScript\n */\nconst findCommonSubsets = (\n    c1: diffNodeType[],\n    c2: diffNodeType[],\n    marked1: boolean[],\n    marked2: boolean[],\n) => {\n    let lcsSize = 0\n    let index: number[] = []\n    const c1Length = c1.length\n    const c2Length = c2.length\n\n    const // set up the matching table\n        matches = [...new Array(c1Length + 1)].map(() => [])\n\n    const uniqueDescriptors = uniqueInBoth(c1, c2)\n\n    let // If all of the elements are the same tag, id and class, then we can\n        // consider them roughly the same even if they have a different number of\n        // children. This will reduce removing and re-adding similar elements.\n        subsetsSame = c1Length === c2Length\n\n    if (subsetsSame) {\n        c1.some((element: nodeType, i: number) => {\n            const c1Desc = elementDescriptors(element)\n            const c2Desc = elementDescriptors(c2[i])\n            if (c1Desc.length !== c2Desc.length) {\n                subsetsSame = false\n                return true\n            }\n            c1Desc.some((description, i) => {\n                if (description !== c2Desc[i]) {\n                    subsetsSame = false\n                    return true\n                }\n            })\n            if (!subsetsSame) {\n                return true\n            }\n        })\n    }\n\n    // fill the matches with distance values\n    for (let c1Index = 0; c1Index < c1Length; c1Index++) {\n        const c1Element = c1[c1Index]\n        for (let c2Index = 0; c2Index < c2Length; c2Index++) {\n            const c2Element = c2[c2Index]\n            if (\n                !marked1[c1Index] &&\n                !marked2[c2Index] &&\n                roughlyEqual(\n                    c1Element,\n                    c2Element,\n                    uniqueDescriptors,\n                    subsetsSame,\n                )\n            ) {\n                matches[c1Index + 1][c2Index + 1] = matches[c1Index][c2Index]\n                    ? matches[c1Index][c2Index] + 1\n                    : 1\n                if (matches[c1Index + 1][c2Index + 1] >= lcsSize) {\n                    lcsSize = matches[c1Index + 1][c2Index + 1]\n                    index = [c1Index + 1, c2Index + 1]\n                }\n            } else {\n                matches[c1Index + 1][c2Index + 1] = 0\n            }\n        }\n    }\n\n    if (lcsSize === 0) {\n        return false\n    }\n\n    return {\n        oldValue: index[0] - lcsSize,\n        newValue: index[1] - lcsSize,\n        length: lcsSize,\n    }\n}\n\nconst makeBooleanArray = (n: number, v: boolean) =>\n    [...new Array(n)].map(() => v)\n\n/**\n * Generate arrays that indicate which node belongs to which subset,\n * or whether it's actually an orphan node, existing in only one\n * of the two trees, rather than somewhere in both.\n *\n * So if t1 = <img><canvas><br>, t2 = <canvas><br><img>.\n * The longest subset is \"<canvas><br>\" (length 2), so it will group 0.\n * The second longest is \"<img>\" (length 1), so it will be group 1.\n * gaps1 will therefore be [1,0,0] and gaps2 [0,0,1].\n *\n * If an element is not part of any group, it will stay being 'true', which\n * is the initial value. For example:\n * t1 = <img><p></p><br><canvas>, t2 = <b></b><br><canvas><img>\n *\n * The \"<p></p>\" and \"<b></b>\" do only show up in one of the two and will\n * therefore be marked by \"true\". The remaining parts are parts of the\n * groups 0 and 1:\n * gaps1 = [1, true, 0, 0], gaps2 = [true, 0, 0, 1]\n *\n */\nexport const getGapInformation = (\n    t1: elementDiffNodeType,\n    t2: elementDiffNodeType,\n    stable: subsetType[],\n) => {\n    const gaps1: (true | number)[] = t1.childNodes\n        ? (makeBooleanArray(t1.childNodes.length, true) as true[])\n        : []\n    const gaps2: (true | number)[] = t2.childNodes\n        ? (makeBooleanArray(t2.childNodes.length, true) as true[])\n        : []\n    let group = 0\n\n    // give elements from the same subset the same group number\n    stable.forEach((subset: subsetType) => {\n        const endOld = subset.oldValue + subset.length\n        const endNew = subset.newValue + subset.length\n\n        for (let j = subset.oldValue; j < endOld; j += 1) {\n            gaps1[j] = group\n        }\n        for (let j = subset.newValue; j < endNew; j += 1) {\n            gaps2[j] = group\n        }\n        group += 1\n    })\n\n    return {\n        gaps1,\n        gaps2,\n    }\n}\n\n/**\n * Find all matching subsets, based on immediate child differences only.\n */\nconst markBoth = (marked1, marked2, subset: subsetType, i: number) => {\n    marked1[subset.oldValue + i] = true\n    marked2[subset.newValue + i] = true\n}\n\nexport const markSubTrees = (\n    oldTree: elementDiffNodeType,\n    newTree: elementDiffNodeType,\n) => {\n    // note: the child lists are views, and so update as we update old/newTree\n    const oldChildren = oldTree.childNodes ? oldTree.childNodes : []\n\n    const newChildren = newTree.childNodes ? newTree.childNodes : []\n    const marked1 = makeBooleanArray(oldChildren.length, false)\n    const marked2 = makeBooleanArray(newChildren.length, false)\n    const subsets = []\n\n    const returnIndex = function () {\n        return arguments[1]\n    }\n\n    let foundAllSubsets = false\n\n    while (!foundAllSubsets) {\n        const subset = findCommonSubsets(\n            oldChildren,\n            newChildren,\n            marked1,\n            marked2,\n        )\n        if (subset) {\n            subsets.push(subset)\n            const subsetArray = [...new Array(subset.length)].map(returnIndex)\n            subsetArray.forEach((item) =>\n                markBoth(marked1, marked2, subset, item),\n            )\n        } else {\n            foundAllSubsets = true\n        }\n    }\n\n    oldTree.subsets = subsets\n    oldTree.subsetsAge = 100\n    return subsets\n}\n\nexport class DiffTracker {\n    list: Diff[]\n    constructor() {\n        this.list = []\n    }\n\n    add(diffs: Diff[]) {\n        this.list.push(...diffs)\n    }\n    forEach(fn: (Diff) => void) {\n        this.list.forEach((li: Diff) => fn(li))\n    }\n}\n","import { DiffDOMOptions, elementNodeType, nodeType, subsetType } from \"../types\"\nimport { Diff } from \"../helpers\"\nimport { cleanNode } from \"./helpers\"\n// ===== Apply a virtual diff =====\n\nfunction getFromVirtualRoute(tree: elementNodeType, route: number[]) {\n    let node = tree\n    let parentNode\n    let nodeIndex\n\n    route = route.slice()\n    while (route.length > 0) {\n        nodeIndex = route.splice(0, 1)[0]\n        parentNode = node\n        node = node.childNodes ? node.childNodes[nodeIndex] : undefined\n    }\n    return {\n        node,\n        parentNode,\n        nodeIndex,\n    }\n}\n\nfunction applyVirtualDiff(\n    tree: elementNodeType,\n    diff: Diff,\n    options: DiffDOMOptions, // {preVirtualDiffApply, postVirtualDiffApply, _const}\n) {\n    let node, parentNode, nodeIndex\n\n    if (\n        ![options._const.addElement, options._const.addTextElement].includes(\n            diff[options._const.action],\n        )\n    ) {\n        // For adding nodes, we calculate the route later on. It's different because it includes the position of the newly added item.\n        const routeInfo = getFromVirtualRoute(tree, diff[options._const.route])\n        node = routeInfo.node\n        parentNode = routeInfo.parentNode\n        nodeIndex = routeInfo.nodeIndex\n    }\n\n    const newSubsets: subsetType[] = []\n\n    // pre-diff hook\n    const info = {\n        diff,\n        node,\n    }\n\n    if (options.preVirtualDiffApply(info)) {\n        return true\n    }\n\n    let newNode\n    let nodeArray\n    let route\n\n    switch (diff[options._const.action]) {\n        case options._const.addAttribute:\n            if (!node.attributes) {\n                node.attributes = {}\n            }\n\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.value]\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = true\n            } else if (diff[options._const.name] === \"selected\") {\n                node.selected = true\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                node.value = diff[options._const.value]\n            }\n\n            break\n        case options._const.modifyAttribute:\n            node.attributes[diff[options._const.name]] =\n                diff[options._const.newValue]\n            break\n        case options._const.removeAttribute:\n            delete node.attributes[diff[options._const.name]]\n\n            if (Object.keys(node.attributes).length === 0) {\n                delete node.attributes\n            }\n\n            if (diff[options._const.name] === \"checked\") {\n                node.checked = false\n            } else if (diff[options._const.name] === \"selected\") {\n                delete node.selected\n            } else if (\n                node.nodeName === \"INPUT\" &&\n                diff[options._const.name] === \"value\"\n            ) {\n                delete node.value\n            }\n\n            break\n        case options._const.modifyTextElement:\n            node.data = diff[options._const.newValue]\n            if (parentNode.nodeName === \"TEXTAREA\") {\n                parentNode.value = diff[options._const.newValue]\n            }\n            break\n        case options._const.modifyValue:\n            node.value = diff[options._const.newValue]\n            break\n        case options._const.modifyComment:\n            node.data = diff[options._const.newValue]\n            break\n        case options._const.modifyChecked:\n            node.checked = diff[options._const.newValue]\n            break\n        case options._const.modifySelected:\n            node.selected = diff[options._const.newValue]\n            break\n        case options._const.replaceElement:\n            newNode = cleanNode(diff[options._const.newValue])\n            parentNode.childNodes[nodeIndex] = newNode\n            break\n        case options._const.relocateGroup:\n            nodeArray = node.childNodes\n                .splice(\n                    diff[options._const.from],\n                    diff[options._const.groupLength],\n                )\n                .reverse()\n            nodeArray.forEach((movedNode: nodeType) =>\n                node.childNodes.splice(diff[options._const.to], 0, movedNode),\n            )\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (\n                        diff[options._const.from] < diff[options._const.to] &&\n                        map.oldValue <= diff[options._const.to] &&\n                        map.oldValue > diff[options._const.from]\n                    ) {\n                        map.oldValue -= diff[options._const.groupLength]\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] +\n                                    diff[options._const.groupLength],\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (\n                        diff[options._const.from] > diff[options._const.to] &&\n                        map.oldValue > diff[options._const.to] &&\n                        map.oldValue < diff[options._const.from]\n                    ) {\n                        map.oldValue += diff[options._const.groupLength]\n                        const splitLength =\n                            map.oldValue + map.length - diff[options._const.to]\n                        if (splitLength > 0) {\n                            // new insertion splits map.\n                            newSubsets.push({\n                                oldValue:\n                                    diff[options._const.to] +\n                                    diff[options._const.groupLength],\n                                newValue:\n                                    map.newValue + map.length - splitLength,\n                                length: splitLength,\n                            })\n                            map.length -= splitLength\n                        }\n                    } else if (map.oldValue === diff[options._const.from]) {\n                        map.oldValue = diff[options._const.to]\n                    }\n                })\n            }\n\n            break\n        case options._const.removeElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addElement: {\n            route = diff[options._const.route].slice()\n            const c: number = route.splice(route.length - 1, 1)[0]\n            node = getFromVirtualRoute(tree, route)?.node\n            newNode = cleanNode(diff[options._const.element])\n\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    } else if (\n                        map.oldValue < c &&\n                        map.oldValue + map.length > c\n                    ) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        }\n        case options._const.removeTextElement:\n            parentNode.childNodes.splice(nodeIndex, 1)\n            if (parentNode.nodeName === \"TEXTAREA\") {\n                delete parentNode.value\n            }\n            if (parentNode.subsets) {\n                parentNode.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue > nodeIndex) {\n                        map.oldValue -= 1\n                    } else if (map.oldValue === nodeIndex) {\n                        map.delete = true\n                    } else if (\n                        map.oldValue < nodeIndex &&\n                        map.oldValue + map.length > nodeIndex\n                    ) {\n                        if (map.oldValue + map.length - 1 === nodeIndex) {\n                            map.length--\n                        } else {\n                            newSubsets.push({\n                                newValue:\n                                    map.newValue + nodeIndex - map.oldValue,\n                                oldValue: nodeIndex,\n                                length:\n                                    map.length - nodeIndex + map.oldValue - 1,\n                            })\n                            map.length = nodeIndex - map.oldValue\n                        }\n                    }\n                })\n            }\n            node = parentNode\n            break\n        case options._const.addTextElement: {\n            route = diff[options._const.route].slice()\n            const c: number = route.splice(route.length - 1, 1)[0]\n            newNode = {\n                nodeName: \"#text\",\n                data: diff[options._const.value],\n            }\n            node = getFromVirtualRoute(tree, route).node\n            if (!node.childNodes) {\n                node.childNodes = []\n            }\n\n            if (c >= node.childNodes.length) {\n                node.childNodes.push(newNode)\n            } else {\n                node.childNodes.splice(c, 0, newNode)\n            }\n            if (node.nodeName === \"TEXTAREA\") {\n                node.value = diff[options._const.newValue]\n            }\n            if (node.subsets) {\n                node.subsets.forEach((map: subsetType) => {\n                    if (map.oldValue >= c) {\n                        map.oldValue += 1\n                    }\n                    if (map.oldValue < c && map.oldValue + map.length > c) {\n                        const splitLength = map.oldValue + map.length - c\n                        newSubsets.push({\n                            newValue: map.newValue + map.length - splitLength,\n                            oldValue: c + 1,\n                            length: splitLength,\n                        })\n                        map.length -= splitLength\n                    }\n                })\n            }\n            break\n        }\n        default:\n            console.log(\"unknown action\")\n    }\n\n    if (node.subsets) {\n        node.subsets = node.subsets.filter(\n            (map: subsetType) => !map.delete && map.oldValue !== map.newValue,\n        )\n        if (newSubsets.length) {\n            node.subsets = node.subsets.concat(newSubsets)\n        }\n    }\n\n    options.postVirtualDiffApply({\n        node: info.node,\n        diff: info.diff,\n        newNode,\n    })\n\n    return\n}\n\nexport function applyVirtual(\n    tree: elementNodeType,\n    diffs: Diff[],\n    options: DiffDOMOptions,\n) {\n    diffs.forEach((diff: Diff) => {\n        applyVirtualDiff(tree, diff, options)\n    })\n    return true\n}\n","import { DiffDOMOptionsPartial, elementNodeType, textNodeType } from \"../types\"\nimport { checkElementType } from \"../helpers\"\n\nexport function nodeToObj(\n    aNode: Element,\n    options: DiffDOMOptionsPartial = { valueDiffing: true },\n) {\n    const objNode: elementNodeType | textNodeType = {\n        nodeName: aNode.nodeName,\n    }\n    if (checkElementType(aNode, \"Text\", \"Comment\")) {\n        ;(objNode as unknown as textNodeType).data = (\n            aNode as unknown as Text | Comment\n        ).data\n    } else {\n        if (aNode.attributes && aNode.attributes.length > 0) {\n            objNode.attributes = {}\n            const nodeArray = Array.prototype.slice.call(aNode.attributes)\n            nodeArray.forEach(\n                (attribute) =>\n                    (objNode.attributes[attribute.name] = attribute.value),\n            )\n        }\n        if (aNode.childNodes && aNode.childNodes.length > 0) {\n            objNode.childNodes = []\n            const nodeArray = Array.prototype.slice.call(aNode.childNodes)\n            nodeArray.forEach((childNode) =>\n                objNode.childNodes.push(nodeToObj(childNode, options)),\n            )\n        }\n        if (options.valueDiffing) {\n            if (checkElementType(aNode, \"HTMLTextAreaElement\")) {\n                objNode.value = (aNode as HTMLTextAreaElement).value\n            }\n            if (\n                checkElementType(aNode, \"HTMLInputElement\") &&\n                [\"radio\", \"checkbox\"].includes(\n                    (aNode as HTMLInputElement).type.toLowerCase(),\n                ) &&\n                (aNode as HTMLInputElement).checked !== undefined\n            ) {\n                objNode.checked = (aNode as HTMLInputElement).checked\n            } else if (\n                checkElementType(\n                    aNode,\n                    \"HTMLButtonElement\",\n                    \"HTMLDataElement\",\n                    \"HTMLInputElement\",\n                    \"HTMLLIElement\",\n                    \"HTMLMeterElement\",\n                    \"HTMLOptionElement\",\n                    \"HTMLProgressElement\",\n                    \"HTMLParamElement\",\n                )\n            ) {\n                objNode.value = (\n                    aNode as\n                        | HTMLButtonElement\n                        | HTMLDataElement\n                        | HTMLInputElement\n                        | HTMLLIElement\n                        | HTMLMeterElement\n                        | HTMLOptionElement\n                        | HTMLProgressElement\n                        | HTMLParamElement\n                ).value\n            }\n            if (checkElementType(aNode, \"HTMLOptionElement\")) {\n                objNode.selected = (aNode as HTMLOptionElement).selected\n            }\n        }\n    }\n    return objNode\n}\n","import { DiffDOMOptionsPartial, nodeType } from \"../types\"\n\n// from html-parse-stringify (MIT)\n\nconst tagRE =\n    /<\\s*\\/*[a-zA-Z:_][a-zA-Z0-9:_\\-.]*\\s*(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\"/>])*\\/*\\s*>|<!--(?:.|\\n|\\r)*?-->/g\n\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\nfunction unescape(string: string) {\n    return string\n        .replace(/&lt;/g, \"<\")\n        .replace(/&gt;/g, \">\")\n        .replace(/&amp;/g, \"&\")\n}\n\n// create optimized lookup object for\n// void elements as listed here:\n// https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nconst lookup = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuItem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n}\n\nconst parseTag = (tag: string, caseSensitive: boolean) => {\n    const res = {\n        nodeName: \"\",\n        attributes: {},\n    }\n    let voidElement = false\n    let type = \"tag\"\n\n    let tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n    if (tagMatch) {\n        res.nodeName =\n            caseSensitive || tagMatch[1] === \"svg\"\n                ? tagMatch[1]\n                : tagMatch[1].toUpperCase()\n        if (lookup[tagMatch[1]] || tag.charAt(tag.length - 2) === \"/\") {\n            voidElement = true\n        }\n\n        // handle comment tag\n        if (res.nodeName.startsWith(\"!--\")) {\n            const endIndex = tag.indexOf(\"-->\")\n            return {\n                type: \"comment\",\n                node: {\n                    nodeName: \"#comment\",\n                    data: endIndex !== -1 ? tag.slice(4, endIndex) : \"\",\n                },\n                voidElement,\n            }\n        }\n    }\n\n    let reg = new RegExp(attrRE)\n    let result = null\n    let done = false\n    while (!done) {\n        result = reg.exec(tag)\n\n        if (result === null) {\n            done = true\n        } else if (result[0].trim()) {\n            if (result[1]) {\n                let attr = result[1].trim()\n                let arr = [attr, \"\"]\n\n                if (attr.indexOf(\"=\") > -1) arr = attr.split(\"=\")\n                res.attributes[arr[0]] = arr[1]\n                reg.lastIndex--\n            } else if (result[2])\n                res.attributes[result[2]] = result[3]\n                    .trim()\n                    .substring(1, result[3].length - 1)\n        }\n    }\n\n    return {\n        type,\n        node: res,\n        voidElement,\n    }\n}\n\nexport const stringToObj = (\n    html: string,\n    options: DiffDOMOptionsPartial = {\n        valueDiffing: true,\n        caseSensitive: false,\n    },\n) => {\n    const result: nodeType[] = []\n    let current: { type: string; node: nodeType; voidElement: boolean }\n    let level = -1\n    const arr: { type: string; node: nodeType; voidElement: boolean }[] = []\n    let inComponent = false,\n        insideSvg = false\n\n    // handle text at top level\n    if (html.indexOf(\"<\") !== 0) {\n        const end = html.indexOf(\"<\")\n        result.push({\n            nodeName: \"#text\",\n            data: end === -1 ? html : html.substring(0, end),\n        })\n    }\n\n    html.replace(tagRE, (tag: string, index: number) => {\n        if (inComponent) {\n            if (tag !== `</${current.node.nodeName}>`) {\n                return \"\"\n            } else {\n                inComponent = false\n            }\n        }\n        const isOpen = tag.charAt(1) !== \"/\"\n        const isComment = tag.startsWith(\"<!--\")\n        const start = index + tag.length\n        const nextChar = html.charAt(start)\n\n        if (isComment) {\n            const comment = parseTag(tag, options.caseSensitive).node\n\n            // if we're at root, push new base node\n            if (level < 0) {\n                result.push(comment)\n                return \"\"\n            }\n            const parent = arr[level]\n            if (parent && comment.nodeName) {\n                if (!parent.node.childNodes) {\n                    parent.node.childNodes = []\n                }\n                parent.node.childNodes.push(comment)\n            }\n            return \"\"\n        }\n\n        if (isOpen) {\n            current = parseTag(tag, options.caseSensitive || insideSvg)\n            if (current.node.nodeName === \"svg\") {\n                insideSvg = true\n            }\n            level++\n            if (\n                !current.voidElement &&\n                !inComponent &&\n                nextChar &&\n                nextChar !== \"<\"\n            ) {\n                if (!current.node.childNodes) {\n                    current.node.childNodes = []\n                }\n                const data = unescape(\n                    html.slice(start, html.indexOf(\"<\", start)),\n                )\n                current.node.childNodes.push({\n                    nodeName: \"#text\",\n                    data,\n                })\n                if (\n                    options.valueDiffing &&\n                    current.node.nodeName === \"TEXTAREA\"\n                ) {\n                    current.node.value = data\n                }\n            }\n            // if we're at root, push new base node\n            if (level === 0 && current.node.nodeName) {\n                result.push(current.node)\n            }\n\n            const parent = arr[level - 1]\n            if (parent && current.node.nodeName) {\n                if (!parent.node.childNodes) {\n                    parent.node.childNodes = []\n                }\n                parent.node.childNodes.push(current.node)\n            }\n            arr[level] = current\n        }\n        if (!isOpen || current.voidElement) {\n            if (\n                level > -1 &&\n                (current.voidElement ||\n                    (options.caseSensitive &&\n                        current.node.nodeName === tag.slice(2, -1)) ||\n                    (!options.caseSensitive &&\n                        current.node.nodeName.toUpperCase() ===\n                            tag.slice(2, -1).toUpperCase()))\n            ) {\n                level--\n                // move current up a level to match the end tag\n                if (level > -1) {\n                    if (current.node.nodeName === \"svg\") {\n                        insideSvg = false\n                    }\n                    current = arr[level]\n                }\n            }\n            if (!inComponent && nextChar !== \"<\" && nextChar) {\n                // trailing text node\n                // if we're at the root, push a base text node. otherwise add as\n                // a child to the current node.\n                const childNodes =\n                    level === -1 ? result : arr[level].node.childNodes || []\n\n                // calculate correct end of the data slice in case there's\n                // no tag after the text node.\n                const end = html.indexOf(\"<\", start)\n                let data = unescape(\n                    html.slice(start, end === -1 ? undefined : end),\n                )\n                childNodes.push({\n                    nodeName: \"#text\",\n                    data,\n                })\n            }\n        }\n        return \"\"\n    })\n    return result[0]\n}\n","import {\n    DiffDOMOptions,\n    diffNodeType,\n    elementDiffNodeType,\n    elementNodeType,\n    subsetType,\n    textDiffNodeType,\n} from \"../types\"\nimport {\n    DiffTracker,\n    cleanNode,\n    getGapInformation,\n    isEqual,\n    markSubTrees,\n    removeDone,\n    roughlyEqual,\n} from \"./helpers\"\nimport { Diff, checkElementType } from \"../helpers\"\nimport { applyVirtual } from \"./apply\"\nimport { nodeToObj } from \"./fromDOM\"\nimport { stringToObj } from \"./fromString\"\n\n// ===== Create a diff =====\n\nexport class DiffFinder {\n    debug: boolean\n    diffcount: number\n    foundAll: boolean\n    options: DiffDOMOptions\n    t1: elementDiffNodeType\n    t1Orig: elementNodeType\n    t2: elementDiffNodeType\n    t2Orig: elementNodeType\n    tracker: DiffTracker\n    constructor(\n        t1Node: string | elementNodeType | Element,\n        t2Node: string | elementNodeType | Element,\n        options: DiffDOMOptions,\n    ) {\n        this.options = options\n        this.t1 = (\n            typeof Element !== \"undefined\" &&\n            checkElementType(t1Node, \"Element\")\n                ? nodeToObj(t1Node as Element, this.options)\n                : typeof t1Node === \"string\"\n                  ? stringToObj(t1Node, this.options)\n                  : JSON.parse(JSON.stringify(t1Node))\n        ) as elementDiffNodeType\n        this.t2 = (\n            typeof Element !== \"undefined\" &&\n            checkElementType(t2Node, \"Element\")\n                ? nodeToObj(t2Node as Element, this.options)\n                : typeof t2Node === \"string\"\n                  ? stringToObj(t2Node, this.options)\n                  : JSON.parse(JSON.stringify(t2Node))\n        ) as elementDiffNodeType\n        this.diffcount = 0\n        this.foundAll = false\n        if (this.debug) {\n            this.t1Orig =\n                typeof Element !== \"undefined\" &&\n                checkElementType(t1Node, \"Element\")\n                    ? nodeToObj(t1Node as Element, this.options)\n                    : typeof t1Node === \"string\"\n                      ? stringToObj(t1Node, this.options)\n                      : JSON.parse(JSON.stringify(t1Node))\n            this.t2Orig =\n                typeof Element !== \"undefined\" &&\n                checkElementType(t2Node, \"Element\")\n                    ? nodeToObj(t2Node as Element, this.options)\n                    : typeof t2Node === \"string\"\n                      ? stringToObj(t2Node, this.options)\n                      : JSON.parse(JSON.stringify(t2Node))\n        }\n\n        this.tracker = new DiffTracker()\n    }\n\n    init() {\n        return this.findDiffs(this.t1, this.t2)\n    }\n\n    findDiffs(t1: elementDiffNodeType, t2: elementDiffNodeType) {\n        let diffs\n        do {\n            if (this.options.debug) {\n                this.diffcount += 1\n                if (this.diffcount > this.options.diffcap) {\n                    throw new Error(\n                        `surpassed diffcap:${JSON.stringify(\n                            this.t1Orig,\n                        )} -> ${JSON.stringify(this.t2Orig)}`,\n                    )\n                }\n            }\n            diffs = this.findNextDiff(t1, t2, [])\n\n            if (diffs.length === 0) {\n                // Last check if the elements really are the same now.\n                // If not, remove all info about being done and start over.\n                // Sometimes a node can be marked as done, but the creation of subsequent diffs means that it has to be changed again.\n                if (!isEqual(t1, t2)) {\n                    if (this.foundAll) {\n                        console.error(\"Could not find remaining diffs!\")\n                    } else {\n                        this.foundAll = true\n                        removeDone(t1)\n                        diffs = this.findNextDiff(t1, t2, [])\n                    }\n                }\n            }\n            if (diffs.length > 0) {\n                this.foundAll = false\n                this.tracker.add(diffs)\n                applyVirtual(t1, diffs, this.options)\n            }\n        } while (diffs.length > 0)\n\n        return this.tracker.list\n    }\n\n    findNextDiff(t1: diffNodeType, t2: diffNodeType, route: number[]) {\n        let diffs\n        let fdiffs\n\n        if (this.options.maxDepth && route.length > this.options.maxDepth) {\n            return []\n        }\n        // outer differences?\n        if (!t1.outerDone) {\n            diffs = this.findOuterDiff(t1, t2, route)\n            if (this.options.filterOuterDiff) {\n                fdiffs = this.options.filterOuterDiff(t1, t2, diffs)\n                if (fdiffs) diffs = fdiffs\n            }\n            if (diffs.length > 0) {\n                t1.outerDone = true\n                return diffs\n            } else {\n                t1.outerDone = true\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(t1, \"data\")) {\n            // Comment or Text\n            return []\n        }\n        t1 = t1 as elementDiffNodeType\n        t2 = t2 as elementDiffNodeType\n\n        // inner differences?\n        if (!t1.innerDone) {\n            diffs = this.findInnerDiff(t1, t2, route)\n            if (diffs.length > 0) {\n                return diffs\n            } else {\n                t1.innerDone = true\n            }\n        }\n\n        if (this.options.valueDiffing && !t1.valueDone) {\n            // value differences?\n            diffs = this.findValueDiff(t1, t2, route)\n\n            if (diffs.length > 0) {\n                t1.valueDone = true\n                return diffs\n            } else {\n                t1.valueDone = true\n            }\n        }\n\n        // no differences\n        return []\n    }\n\n    findOuterDiff(t1: diffNodeType, t2: diffNodeType, route: number[]) {\n        const diffs = []\n        let attr\n        let attr1\n        let attr2\n        let attrLength\n        let pos\n        let i\n        if (t1.nodeName !== t2.nodeName) {\n            if (!route.length) {\n                throw new Error(\"Top level nodes have to be of the same kind.\")\n            }\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement,\n                    )\n                    .setValue(this.options._const.oldValue, cleanNode(t1))\n                    .setValue(this.options._const.newValue, cleanNode(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n        if (\n            route.length &&\n            this.options.diffcap <\n                Math.abs(\n                    (t1.childNodes || []).length - (t2.childNodes || []).length,\n                )\n        ) {\n            return [\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.replaceElement,\n                    )\n                    .setValue(this.options._const.oldValue, cleanNode(t1))\n                    .setValue(this.options._const.newValue, cleanNode(t2))\n                    .setValue(this.options._const.route, route),\n            ]\n        }\n\n        if (\n            Object.prototype.hasOwnProperty.call(t1, \"data\") &&\n            (t1 as textDiffNodeType).data !== (t2 as textDiffNodeType).data\n        ) {\n            // Comment or text node.\n            if (t1.nodeName === \"#text\") {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyTextElement,\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(\n                            this.options._const.oldValue,\n                            (t1 as textDiffNodeType).data,\n                        )\n                        .setValue(\n                            this.options._const.newValue,\n                            (t2 as textDiffNodeType).data,\n                        ),\n                ]\n            } else {\n                return [\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.modifyComment,\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(\n                            this.options._const.oldValue,\n                            (t1 as textDiffNodeType).data,\n                        )\n                        .setValue(\n                            this.options._const.newValue,\n                            (t2 as textDiffNodeType).data,\n                        ),\n                ]\n            }\n        }\n\n        t1 = t1 as elementDiffNodeType\n        t2 = t2 as elementDiffNodeType\n\n        attr1 = t1.attributes ? Object.keys(t1.attributes).sort() : []\n        attr2 = t2.attributes ? Object.keys(t2.attributes).sort() : []\n\n        attrLength = attr1.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr1[i]\n            pos = attr2.indexOf(attr)\n            if (pos === -1) {\n                diffs.push(\n                    new Diff()\n                        .setValue(\n                            this.options._const.action,\n                            this.options._const.removeAttribute,\n                        )\n                        .setValue(this.options._const.route, route)\n                        .setValue(this.options._const.name, attr)\n                        .setValue(\n                            this.options._const.value,\n                            t1.attributes[attr],\n                        ),\n                )\n            } else {\n                attr2.splice(pos, 1)\n                if (t1.attributes[attr] !== t2.attributes[attr]) {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.modifyAttribute,\n                            )\n                            .setValue(this.options._const.route, route)\n                            .setValue(this.options._const.name, attr)\n                            .setValue(\n                                this.options._const.oldValue,\n                                t1.attributes[attr],\n                            )\n                            .setValue(\n                                this.options._const.newValue,\n                                t2.attributes[attr],\n                            ),\n                    )\n                }\n            }\n        }\n\n        attrLength = attr2.length\n        for (i = 0; i < attrLength; i++) {\n            attr = attr2[i]\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.addAttribute,\n                    )\n                    .setValue(this.options._const.route, route)\n                    .setValue(this.options._const.name, attr)\n                    .setValue(this.options._const.value, t2.attributes[attr]),\n            )\n        }\n\n        return diffs\n    }\n\n    findInnerDiff(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        route: number[],\n    ) {\n        const t1ChildNodes = t1.childNodes ? t1.childNodes.slice() : []\n        const t2ChildNodes = t2.childNodes ? t2.childNodes.slice() : []\n        const last = Math.max(t1ChildNodes.length, t2ChildNodes.length)\n        let childNodesLengthDifference = Math.abs(\n            t1ChildNodes.length - t2ChildNodes.length,\n        )\n        let diffs: Diff[] = []\n        let index = 0\n        if (!this.options.maxChildCount || last < this.options.maxChildCount) {\n            const cachedSubtrees = Boolean(t1.subsets && t1.subsetsAge--)\n            const subtrees = cachedSubtrees\n                ? t1.subsets\n                : t1.childNodes && t2.childNodes\n                  ? markSubTrees(t1, t2)\n                  : []\n            if (subtrees.length > 0) {\n                /* One or more groups have been identified among the childnodes of t1\n                 * and t2.\n                 */\n                diffs = this.attemptGroupRelocation(\n                    t1,\n                    t2,\n                    subtrees,\n                    route,\n                    cachedSubtrees,\n                )\n                if (diffs.length > 0) {\n                    return diffs\n                }\n            }\n        }\n\n        /* 0 or 1 groups of similar child nodes have been found\n         * for t1 and t2. 1 If there is 1, it could be a sign that the\n         * contents are the same. When the number of groups is below 2,\n         * t1 and t2 are made to have the same length and each of the\n         * pairs of child nodes are diffed.\n         */\n\n        for (let i = 0; i < last; i += 1) {\n            const e1 = t1ChildNodes[i]\n            const e2 = t2ChildNodes[i]\n\n            if (childNodesLengthDifference) {\n                /* t1 and t2 have different amounts of childNodes. Add\n                 * and remove as necessary to obtain the same length */\n                if (e1 && !e2) {\n                    if (e1.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement,\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                )\n                                .setValue(\n                                    this.options._const.value,\n                                    (e1 as textDiffNodeType).data,\n                                ),\n                        )\n                        index -= 1\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeElement,\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cleanNode(e1),\n                                ),\n                        )\n                        index -= 1\n                    }\n                } else if (e2 && !e1) {\n                    if (e2.nodeName === \"#text\") {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addTextElement,\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                )\n                                .setValue(\n                                    this.options._const.value,\n                                    (e2 as textDiffNodeType).data,\n                                ),\n                        )\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement,\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cleanNode(e2),\n                                ),\n                        )\n                    }\n                }\n            }\n            /* We are now guaranteed that childNodes e1 and e2 exist,\n             * and that they can be diffed.\n             */\n            /* Diffs in child nodes should not affect the parent node,\n             * so we let these diffs be submitted together with other\n             * diffs.\n             */\n\n            if (e1 && e2) {\n                if (\n                    !this.options.maxChildCount ||\n                    last < this.options.maxChildCount\n                ) {\n                    diffs = diffs.concat(\n                        this.findNextDiff(e1, e2, route.concat(index)),\n                    )\n                } else if (!isEqual(e1, e2)) {\n                    if (t1ChildNodes.length > t2ChildNodes.length) {\n                        if (e1.nodeName === \"#text\") {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeTextElement,\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index),\n                                    )\n                                    .setValue(\n                                        this.options._const.value,\n                                        (e1 as textDiffNodeType).data,\n                                    ),\n                            )\n                        } else {\n                            diffs.push(\n                                new Diff()\n                                    .setValue(\n                                        this.options._const.action,\n                                        this.options._const.removeElement,\n                                    )\n                                    .setValue(\n                                        this.options._const.element,\n                                        cleanNode(e1),\n                                    )\n                                    .setValue(\n                                        this.options._const.route,\n                                        route.concat(index),\n                                    ),\n                            )\n                        }\n                        t1ChildNodes.splice(i, 1)\n                        i -= 1\n                        index -= 1\n\n                        childNodesLengthDifference -= 1\n                    } else if (t1ChildNodes.length < t2ChildNodes.length) {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.addElement,\n                                )\n                                .setValue(\n                                    this.options._const.element,\n                                    cleanNode(e2),\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                ),\n                        ])\n                        t1ChildNodes.splice(i, 0, cleanNode(e2))\n                        childNodesLengthDifference -= 1\n                    } else {\n                        diffs = diffs.concat([\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.replaceElement,\n                                )\n                                .setValue(\n                                    this.options._const.oldValue,\n                                    cleanNode(e1),\n                                )\n                                .setValue(\n                                    this.options._const.newValue,\n                                    cleanNode(e2),\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index),\n                                ),\n                        ])\n                    }\n                }\n            }\n            index += 1\n        }\n        t1.innerDone = true\n        return diffs\n    }\n\n    attemptGroupRelocation(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        subtrees: subsetType[],\n        route: number[],\n        cachedSubtrees: boolean,\n    ) {\n        /* Either t1.childNodes and t2.childNodes have the same length, or\n         * there are at least two groups of similar elements can be found.\n         * attempts are made at equalizing t1 with t2. First all initial\n         * elements with no group affiliation (gaps=true) are removed (if\n         * only in t1) or added (if only in t2). Then the creation of a group\n         * relocation diff is attempted.\n         */\n        const gapInformation = getGapInformation(t1, t2, subtrees)\n        const gaps1 = gapInformation.gaps1\n        const gaps2 = gapInformation.gaps2\n        const t1ChildNodes = t1.childNodes.slice()\n        const t2ChildNodes = t2.childNodes.slice()\n        let shortest = Math.min(gaps1.length, gaps2.length)\n        let destinationDifferent\n        let toGroup\n        let group\n        let node\n        let similarNode\n        const diffs = []\n        for (\n            let index2 = 0, index1 = 0;\n            index2 < shortest;\n            index1 += 1, index2 += 1\n        ) {\n            if (\n                cachedSubtrees &&\n                (gaps1[index2] === true || gaps2[index2] === true)\n            ) {\n                // pass\n            } else if (gaps1[index1] === true) {\n                node = t1ChildNodes[index1]\n                if (node.nodeName === \"#text\") {\n                    if (t2ChildNodes[index2].nodeName === \"#text\") {\n                        if (\n                            (node as textDiffNodeType).data !==\n                            (t2ChildNodes[index2] as textDiffNodeType).data\n                        ) {\n                            // Check whether a text node with the same value follows later on.\n                            let testI = index1\n                            while (\n                                t1ChildNodes.length > testI + 1 &&\n                                t1ChildNodes[testI + 1].nodeName === \"#text\"\n                            ) {\n                                testI += 1\n                                if (\n                                    (t2ChildNodes[index2] as textDiffNodeType)\n                                        .data ===\n                                    (t1ChildNodes[testI] as textDiffNodeType)\n                                        .data\n                                ) {\n                                    similarNode = true\n                                    break\n                                }\n                            }\n                            if (!similarNode) {\n                                diffs.push(\n                                    new Diff()\n                                        .setValue(\n                                            this.options._const.action,\n                                            this.options._const\n                                                .modifyTextElement,\n                                        )\n                                        .setValue(\n                                            this.options._const.route,\n                                            route.concat(index1),\n                                        )\n                                        .setValue(\n                                            this.options._const.oldValue,\n                                            node.data,\n                                        )\n                                        .setValue(\n                                            this.options._const.newValue,\n                                            (\n                                                t2ChildNodes[\n                                                    index2\n                                                ] as textDiffNodeType\n                                            ).data,\n                                        ),\n                                    // t1ChildNodes at position index1 is not up-to-date, but that does not matter as\n                                    // index1 will increase +1\n                                )\n                            }\n                        }\n                    } else {\n                        diffs.push(\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.removeTextElement,\n                                )\n                                .setValue(\n                                    this.options._const.route,\n                                    route.concat(index1),\n                                )\n                                .setValue(this.options._const.value, node.data),\n                        )\n                        gaps1.splice(index1, 1)\n                        t1ChildNodes.splice(index1, 1)\n                        shortest = Math.min(gaps1.length, gaps2.length)\n                        index1 -= 1\n                        index2 -= 1\n                    }\n                } else if (gaps2[index2] === true) {\n                    // both gaps1[index1] and gaps2[index2]  are true.\n                    // We replace one element with another.\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.replaceElement,\n                            )\n                            .setValue(\n                                this.options._const.oldValue,\n                                cleanNode(node),\n                            )\n                            .setValue(\n                                this.options._const.newValue,\n                                cleanNode(t2ChildNodes[index2]),\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index1),\n                            ),\n                    )\n                    // t1ChildNodes at position index1 is not up-to-date, but that does not matter as\n                    // index1 will increase +1\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.removeElement,\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index1),\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cleanNode(node),\n                            ),\n                    )\n                    gaps1.splice(index1, 1)\n                    t1ChildNodes.splice(index1, 1)\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    index1 -= 1\n                    index2 -= 1\n                }\n            } else if (gaps2[index2] === true) {\n                node = t2ChildNodes[index2]\n                if (node.nodeName === \"#text\") {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addTextElement,\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index1),\n                            )\n                            .setValue(this.options._const.value, node.data),\n                    )\n                    gaps1.splice(index1, 0, true)\n                    t1ChildNodes.splice(index1, 0, {\n                        nodeName: \"#text\",\n                        data: node.data,\n                    })\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    //index1 += 1\n                } else {\n                    diffs.push(\n                        new Diff()\n                            .setValue(\n                                this.options._const.action,\n                                this.options._const.addElement,\n                            )\n                            .setValue(\n                                this.options._const.route,\n                                route.concat(index1),\n                            )\n                            .setValue(\n                                this.options._const.element,\n                                cleanNode(node),\n                            ),\n                    )\n                    gaps1.splice(index1, 0, true)\n                    t1ChildNodes.splice(index1, 0, cleanNode(node))\n                    shortest = Math.min(gaps1.length, gaps2.length)\n                    //index1 += 1\n                }\n            } else if (gaps1[index1] !== gaps2[index2]) {\n                if (diffs.length > 0) {\n                    return diffs\n                }\n                // group relocation\n                group = subtrees[gaps1[index1] as number]\n                toGroup = Math.min(\n                    group.newValue,\n                    t1ChildNodes.length - group.length,\n                )\n                if (toGroup !== group.oldValue && toGroup > -1) {\n                    // Check whether destination nodes are different than originating ones.\n                    destinationDifferent = false\n                    for (let j = 0; j < group.length; j += 1) {\n                        if (\n                            !roughlyEqual(\n                                t1ChildNodes[toGroup + j],\n                                t1ChildNodes[group.oldValue + j],\n                                {},\n                                false,\n                                true,\n                            )\n                        ) {\n                            destinationDifferent = true\n                        }\n                    }\n                    if (destinationDifferent) {\n                        return [\n                            new Diff()\n                                .setValue(\n                                    this.options._const.action,\n                                    this.options._const.relocateGroup,\n                                )\n                                .setValue(\n                                    this.options._const.groupLength,\n                                    group.length,\n                                )\n                                .setValue(\n                                    this.options._const.from,\n                                    group.oldValue,\n                                )\n                                .setValue(this.options._const.to, toGroup)\n                                .setValue(this.options._const.route, route),\n                        ]\n                    }\n                }\n            }\n        }\n        return diffs\n    }\n\n    findValueDiff(\n        t1: elementDiffNodeType,\n        t2: elementDiffNodeType,\n        route: number[],\n    ) {\n        // Differences of value. Only useful if the value/selection/checked value\n        // differs from what is represented in the DOM. For example in the case\n        // of filled out forms, etc.\n        const diffs = []\n\n        if (t1.selected !== t2.selected) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifySelected,\n                    )\n                    .setValue(this.options._const.oldValue, t1.selected)\n                    .setValue(this.options._const.newValue, t2.selected)\n                    .setValue(this.options._const.route, route),\n            )\n        }\n\n        if (\n            (t1.value || t2.value) &&\n            t1.value !== t2.value &&\n            t1.nodeName !== \"OPTION\"\n        ) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyValue,\n                    )\n                    .setValue(this.options._const.oldValue, t1.value || \"\")\n                    .setValue(this.options._const.newValue, t2.value || \"\")\n                    .setValue(this.options._const.route, route),\n            )\n        }\n        if (t1.checked !== t2.checked) {\n            diffs.push(\n                new Diff()\n                    .setValue(\n                        this.options._const.action,\n                        this.options._const.modifyChecked,\n                    )\n                    .setValue(this.options._const.oldValue, t1.checked)\n                    .setValue(this.options._const.newValue, t2.checked)\n                    .setValue(this.options._const.route, route),\n            )\n        }\n\n        return diffs\n    }\n}\n","import {\n    ConstNames,\n    ConstNamesPartial,\n    DiffDOMOptions,\n    DiffDOMOptionsPartial,\n    diffType,\n    elementNodeType,\n    textNodeType,\n} from \"./types\"\nimport { applyDOM, undoDOM } from \"./dom/index\"\nimport { Diff } from \"./helpers\"\nimport { DiffFinder } from \"./virtual/index\"\nexport { nodeToObj, stringToObj } from \"./virtual/index\"\n\nconst DEFAULT_OPTIONS = {\n    debug: false,\n    diffcap: 10, // Limit for how many diffs are accepting when debugging. Inactive when debug is false.\n    maxDepth: false, // False or a numeral. If set to a numeral, limits the level of depth that the the diff mechanism looks for differences. If false, goes through the entire tree.\n    maxChildCount: 50, // False or a numeral. If set to a numeral, only does a simplified form of diffing of contents so that the number of diffs cannot be higher than the number of child nodes.\n    valueDiffing: true, // Whether to take into consideration the values of forms that differ from auto assigned values (when a user fills out a form).\n    // syntax: textDiff: function (node, currentValue, expectedValue, newValue)\n    textDiff(\n        node: textNodeType,\n        currentValue: string,\n        expectedValue: string,\n        newValue: string,\n    ) {\n        node.data = newValue\n        return\n    },\n    // empty functions were benchmarked as running faster than both\n    // `f && f()` and `if (f) { f(); }`\n    preVirtualDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    postVirtualDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    preDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    postDiffApply() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    filterOuterDiff: null,\n    compress: false, // Whether to work with compressed diffs\n    _const: false, // object with strings for every change types to be used in diffs.\n    document:\n        typeof window !== \"undefined\" && window.document\n            ? window.document\n            : false,\n    components: [], // list of components used for converting from string\n}\n\nexport class DiffDOM {\n    options: DiffDOMOptions\n    constructor(options: DiffDOMOptionsPartial = {}) {\n        // IE11 doesn't have Object.assign and buble doesn't translate object spreaders\n        // by default, so this is the safest way of doing it currently.\n        Object.entries(DEFAULT_OPTIONS).forEach(([key, value]) => {\n            if (!Object.prototype.hasOwnProperty.call(options, key)) {\n                options[key] = value\n            }\n        })\n\n        if (!options._const) {\n            const varNames = [\n                \"addAttribute\",\n                \"modifyAttribute\",\n                \"removeAttribute\",\n                \"modifyTextElement\",\n                \"relocateGroup\",\n                \"removeElement\",\n                \"addElement\",\n                \"removeTextElement\",\n                \"addTextElement\",\n                \"replaceElement\",\n                \"modifyValue\",\n                \"modifyChecked\",\n                \"modifySelected\",\n                \"modifyComment\",\n                \"action\",\n                \"route\",\n                \"oldValue\",\n                \"newValue\",\n                \"element\",\n                \"group\",\n                \"groupLength\",\n                \"from\",\n                \"to\",\n                \"name\",\n                \"value\",\n                \"data\",\n                \"attributes\",\n                \"nodeName\",\n                \"childNodes\",\n                \"checked\",\n                \"selected\",\n            ]\n            const constNames: ConstNamesPartial = {}\n            if (options.compress) {\n                varNames.forEach(\n                    (varName, index) => (constNames[varName] = index),\n                )\n            } else {\n                varNames.forEach((varName) => (constNames[varName] = varName))\n            }\n            options._const = constNames as ConstNames\n        }\n\n        this.options = options as DiffDOMOptions\n    }\n\n    apply(tree: Element, diffs: (Diff | diffType)[]) {\n        return applyDOM(tree, diffs, this.options)\n    }\n\n    undo(tree: Element, diffs: (Diff | diffType)[]) {\n        return undoDOM(tree, diffs, this.options)\n    }\n\n    diff(\n        t1Node: string | elementNodeType | Element,\n        t2Node: string | elementNodeType | Element,\n    ) {\n        const finder = new DiffFinder(t1Node, t2Node, this.options)\n        return finder.init()\n    }\n}\n","import { checkElementType } from \"./diffDOM/helpers\"\n\n/**\n * Use TraceLogger to figure out function calls inside\n * JS objects by wrapping an object with a TraceLogger\n * instance.\n *\n * Pretty-prints the call trace (using unicode box code)\n * when tracelogger.toString() is called.\n */\n\n/**\n * Wrap an object by calling new TraceLogger(obj)\n *\n * If you're familiar with Python decorators, this\n * does roughly the same thing, adding pre/post\n * call hook logging calls so that you can see\n * what's going on.\n */\nexport class TraceLogger {\n    messages: string[]\n    pad: string\n    padding: string\n    tick: number\n    constructor(obj = {}) {\n        this.pad = \"│   \"\n        this.padding = \"\"\n        this.tick = 1\n        this.messages = []\n        const wrapkey = (obj: object, key: string) => {\n            // trace this function\n            const oldfn = obj[key]\n            obj[key] = (\n                ...args: ((\n                    ...args: (\n                        | string\n                        | HTMLElement\n                        | number\n                        | boolean\n                        | false\n                        | (string | HTMLElement | number | boolean | false)[]\n                    )[]\n                ) => void)[]\n            ) => {\n                this.fin(key, Array.prototype.slice.call(args))\n                const result = oldfn.apply(obj, args)\n                this.fout(key, result)\n                return result\n            }\n        }\n        // can't use Object.keys for prototype walking\n        for (let key in obj) {\n            if (typeof obj[key] === \"function\") {\n                wrapkey(obj, key)\n            }\n        }\n        this.log(\"┌ TRACELOG START\")\n    }\n    // called when entering a function\n    fin(\n        fn: string,\n        args:\n            | string\n            | HTMLElement\n            | number\n            | boolean\n            | false\n            | (string | HTMLElement | number | boolean | false)[],\n    ) {\n        this.padding += this.pad\n        this.log(`├─> entering ${fn}`, args)\n    }\n    // called when exiting a function\n    fout(\n        fn: string,\n        result:\n            | string\n            | HTMLElement\n            | number\n            | boolean\n            | false\n            | (string | HTMLElement | number | boolean | false)[],\n    ) {\n        this.log(\"│<──┘ generated return value\", result)\n        this.padding = this.padding.substring(\n            0,\n            this.padding.length - this.pad.length,\n        )\n    }\n    // log message formatting\n    format(s: string, tick: number) {\n        let nf = function (t: number) {\n            let tStr = `${t}`\n            while (tStr.length < 4) {\n                tStr = `0${t}`\n            }\n            return tStr\n        }\n        return `${nf(tick)}> ${this.padding}${s}`\n    }\n    // log a trace message\n    log(...args) {\n        const stringCollapse = function (\n            v:\n                | string\n                | HTMLElement\n                | number\n                | boolean\n                | false\n                | (string | HTMLElement | number | boolean | false)[],\n        ) {\n            if (!v) {\n                return \"<falsey>\"\n            }\n            if (typeof v === \"string\") {\n                return v\n            }\n            if (checkElementType(v, \"HTMLElement\")) {\n                return (v as HTMLElement).outerHTML || \"<empty>\"\n            }\n            if (v instanceof Array) {\n                return `[${v.map(stringCollapse).join(\",\")}]`\n            }\n            return v.toString() || v.valueOf() || \"<unknown>\"\n        }\n        const s = args.map(stringCollapse).join(\", \")\n        this.messages.push(this.format(s, this.tick++))\n    }\n    // turn the log into a structured string with\n    // unicode box codes to make it a sensible trace.\n    toString() {\n        let cap = \"×   \"\n        let terminator = \"└───\"\n        while (terminator.length <= this.padding.length + this.pad.length) {\n            terminator += cap\n        }\n        let _ = this.padding\n        this.padding = \"\"\n        terminator = this.format(terminator, this.tick)\n        this.padding = _\n        return `${this.messages.join(\"\\n\")}\\n${terminator}`\n    }\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__spreadArray","to","from","pack","ar","l","Array","slice","concat","SuppressedError","Diff","options","_this","entries","forEach","_a","key","value","toString","JSON","stringify","setValue","aKey","aValue","checkElementType","element","elementTypeNames","_i","some","elementTypeName","_b","ownerDocument","defaultView","objToNode","objNode","insideSvg","node","nodeName","document","createTextNode","data","createComment","createElementNS","toLowerCase","createElement","attributes","setAttribute","childNodes","childNode","appendChild","valueDiffing","checked","selected","getFromRoute","route","c","splice","applyDiff","tree","diff","newNode","reference","action","_const","addElement","addTextElement","includes","info","preDiffApply","addAttribute","name","modifyAttribute","newValue","removeAttribute","modifyTextElement","textDiff","oldValue","parentNode","modifyValue","modifyComment","modifyChecked","modifySelected","replaceElement","namespaceURI","replaceChild","relocateGroup","groupLength","map","removeChild","index","insertBefore","removeElement","parentRoute","removeTextElement","nodeType","console","log","postDiffApply","swap","obj","p1","p2","tmp","undoDOM","diffs","reverse","undoDiff","elementDescriptors","el","output","push","replace","id","findUniqueDescriptors","li","uniqueDescriptors","duplicateDescriptors","descriptor","inUnique","uniqueInBoth","l1","l2","l1Unique","l2Unique","inBoth","keys","removeDone","outerDone","innerDone","valueDone","every","cleanNode","diffNode","elementNode","diffChildNode","isEqual","e1","e2","Boolean","e1Attributes","e2Attributes","attribute","roughlyEqual","sameSiblings","preventRecursion","nodeList1","nodeList2","childUniqueDescriptors_1","makeBooleanArray","v","markSubTrees","oldTree","newTree","oldChildren","newChildren","marked1","marked2","subsets","returnIndex","foundAllSubsets","subset","c1","c2","lcsSize","c1Length","c2Length","matches","subsetsSame","c1Desc","c2Desc","description","c1Index","c1Element","c2Index","c2Element","findCommonSubsets","item","markBoth","subsetsAge","DiffTracker","list","add","fn","getFromVirtualRoute","nodeIndex","undefined","applyVirtual","routeInfo","newSubsets","preVirtualDiffApply","movedNode","splitLength","c_1","c_2","filter","postVirtualDiffApply","applyVirtualDiff","nodeToObj","aNode","type","tagRE","attrRE","unescape","string","lookup","area","base","br","col","embed","hr","img","input","keygen","link","menuItem","meta","param","source","track","wbr","parseTag","tag","caseSensitive","res","voidElement","tagMatch","match","toUpperCase","charAt","startsWith","endIndex","indexOf","reg","RegExp","result","done","exec","trim","attr","arr","split","lastIndex","substring","stringToObj","html","current","level","end","isOpen","isComment","start","nextChar","comment","parent_1","parent_2","DiffFinder","t1Node","t2Node","t1","Element","parse","t2","diffcount","foundAll","debug","t1Orig","t2Orig","tracker","init","findDiffs","diffcap","Error","findNextDiff","error","fdiffs","maxDepth","findOuterDiff","filterOuterDiff","findInnerDiff","findValueDiff","attr1","attr2","attrLength","pos","Math","abs","sort","t1ChildNodes","t2ChildNodes","last","max","childNodesLengthDifference","maxChildCount","cachedSubtrees","subtrees","attemptGroupRelocation","destinationDifferent","toGroup","group","similarNode","gapInformation","stable","gaps1","gaps2","endOld","endNew","j","getGapInformation","shortest","min","index2","index1","testI","DEFAULT_OPTIONS","currentValue","expectedValue","compress","window","components","DiffDOM","varNames","constNames_1","varName","applyDOM","undo","TraceLogger","pad","padding","tick","messages","wrapkey","oldfn","args","fin","fout","format","tStr","nf","stringCollapse","outerHTML","join","valueOf","terminator","_"],"mappings":"qCA+BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,QAASC,cAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,EAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,CACV,EACMH,EAASa,MAAMC,KAAMP,UAChC,EA6KO,SAASQ,EAAcC,EAAIC,EAAMC,GACpC,GAAIA,GAA6B,IAArBX,UAAUC,OAAc,IAAK,IAA4BW,EAAxBd,EAAI,EAAGe,EAAIH,EAAKT,OAAYH,EAAIe,EAAGf,KACxEc,GAAQd,KAAKY,IACRE,IAAIA,EAAKE,MAAMX,UAAUY,MAAMV,KAAKK,EAAM,EAAGZ,IAClDc,EAAGd,GAAKY,EAAKZ,IAGrB,OAAOW,EAAGO,OAAOJ,GAAME,MAAMX,UAAUY,MAAMV,KAAKK,GACtD,CA8FkD,mBAApBO,iBAAiCA,gBCzT/D,IAAAC,EAAA,WACI,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAY,CAAA,GAAxB,IAECC,EAAAb,KADGb,OAAO2B,QAAQF,GAASG,SAAQ,SAACC,OAACC,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GAAM,OAACH,EAAKI,GAAOC,CAAb,GACrD,CAmBL,OAjBIP,EAAAf,UAAAuB,SAAA,WACI,OAAOC,KAAKC,UAAUrB,OAG1BW,EAAAf,UAAA0B,SAAA,SACIC,EACAC,GASA,OADAxB,KAAKuB,GAAQC,EACNxB,MAEdW,CAAD,IAEM,SAAUc,EAAiBC,uBAAsCC,EAAA,GAAAC,EAAA,EAA7BA,EAA6BnC,UAAAC,OAA7BkC,IAAAD,EAA6BC,EAAA,GAAAnC,EAAAmC,GACnE,OAAI,MAAOF,GAGJC,EAAiBE,MACpB,SAACC,WAGG,MACI,mBADyC,QAAtCC,EAAwB,QAAxBf,EAAAU,aAAO,EAAPA,EAASM,qBAAe,IAAAhB,OAAA,EAAAA,EAAAiB,mBAAc,IAAAF,OAAA,EAAAA,EAAAD,KAE7CJ,aACIA,EAAQM,cAAcC,YAAYH,EAAgB,GAElE,UCpCgBI,EACZC,EACAC,EACAxB,GAEA,IAAIyB,EAyEJ,MAxEyB,UAArBF,EAAQG,SACRD,EAAOzB,EAAQ2B,SAASC,eAAgBL,EAAyBM,MACrC,aAArBN,EAAQG,SACfD,EAAOzB,EAAQ2B,SAASG,cAAeP,EAAyBM,OAE5DL,GACAC,EAAOzB,EAAQ2B,SAASI,gBACpB,6BACAR,EAAQG,UAEa,kBAArBH,EAAQG,WACRF,GAAY,IAE0B,QAAnCD,EAAQG,SAASM,eACxBP,EAAOzB,EAAQ2B,SAASI,gBACpB,6BACA,OAEJP,GAAY,GAEZC,EAAOzB,EAAQ2B,SAASM,cAAcV,EAAQG,UAE9CH,EAAQW,YACR3D,OAAO2B,QAAQqB,EAAQW,YAAY/B,SAAQ,SAACC,OAACC,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GACnD,OAACqB,EAAiBU,aAAa9B,EAAKC,EAApC,IAGJiB,EAAQa,YAERb,EAAQa,WAAWjC,SACf,SAACkC,GACG,OAAAZ,EAAKa,YAAYhB,EAAUe,EAAWb,EAAWxB,GAAjD,IAGRA,EAAQuC,eAEJhB,EAAQjB,OACRO,EACIY,EACA,oBACA,kBACA,mBACA,gBACA,mBACA,oBACA,sBACA,sBAIAA,EASFnB,MAAQiB,EAAQjB,OAElBiB,EAAQiB,SAAW3B,EAAiBY,EAAM,sBACxCA,EAA0Be,QAAUjB,EAAQiB,SAG9CjB,EAAQkB,UACR5B,EAAiBY,EAAM,uBAErBA,EAA2BgB,SAAWlB,EAAQkB,YAIrDhB,CACX,CC3EA,IAAMiB,EAAe,SACjBjB,EACAkB,GAGA,IADAA,EAAQA,EAAM/C,QACP+C,EAAM7D,OAAS,GAAG,CACrB,IAAM8D,EAAID,EAAME,OAAO,EAAG,GAAG,GAC7BpB,EAAOA,EAAKW,WAAWQ,EAC1B,CACD,OAAOnB,CACX,WAEgBqB,EACZC,EACAC,EACAhD,GAEA,IAEIyB,EAWAwB,EACAC,EAdEC,EAASH,EAAKhD,EAAQoD,OAAOD,QAC7BR,EAAQK,EAAKhD,EAAQoD,OAAOT,OAI7B,CAAC3C,EAAQoD,OAAOC,WAAYrD,EAAQoD,OAAOE,gBAAgBC,SACxDJ,KAIJ1B,EAAOiB,EAAaK,EAAMJ,IAQ9B,IAAMa,EAAO,CACTR,KAAIA,EACJvB,KAAIA,GAGR,GAAIzB,EAAQyD,aAAaD,GACrB,OAAO,EAGX,OAAQL,GACJ,KAAKnD,EAAQoD,OAAOM,aAChB,IAAKjC,IAASZ,EAAiBY,EAAM,WACjC,OAAO,EAEXA,EAAKU,aACDa,EAAKhD,EAAQoD,OAAOO,MACpBX,EAAKhD,EAAQoD,OAAO9C,QAExB,MACJ,KAAKN,EAAQoD,OAAOQ,gBAChB,IAAKnC,IAASZ,EAAiBY,EAAM,WACjC,OAAO,EAEXA,EAAKU,aACDa,EAAKhD,EAAQoD,OAAOO,MACpBX,EAAKhD,EAAQoD,OAAOS,WAGpBhD,EAAiBY,EAAM,qBACO,UAA9BuB,EAAKhD,EAAQoD,OAAOO,QAEpBlC,EAAKnB,MAAQ0C,EAAKhD,EAAQoD,OAAOS,WAErC,MACJ,KAAK7D,EAAQoD,OAAOU,gBAChB,IAAKrC,IAASZ,EAAiBY,EAAM,WACjC,OAAO,EAEXA,EAAKqC,gBAAgBd,EAAKhD,EAAQoD,OAAOO,OACzC,MACJ,KAAK3D,EAAQoD,OAAOW,kBAChB,IAAKtC,IAASZ,EAAiBY,EAAM,QACjC,OAAO,EAEXzB,EAAQgE,SACJvC,EACAA,EAAKI,KACLmB,EAAKhD,EAAQoD,OAAOa,UACpBjB,EAAKhD,EAAQoD,OAAOS,WAEpBhD,EAAiBY,EAAKyC,WAAY,yBAClCzC,EAAKyC,WAAW5D,MAAQ0C,EAAKhD,EAAQoD,OAAOS,WAEhD,MACJ,KAAK7D,EAAQoD,OAAOe,YAChB,IAAK1C,QAA8B,IAAfA,EAAKnB,MACrB,OAAO,EAEXmB,EAAKnB,MAAQ0C,EAAKhD,EAAQoD,OAAOS,UACjC,MACJ,KAAK7D,EAAQoD,OAAOgB,cAChB,IAAK3C,IAASZ,EAAiBY,EAAM,WACjC,OAAO,EAEXzB,EAAQgE,SACJvC,EACAA,EAAKI,KACLmB,EAAKhD,EAAQoD,OAAOa,UACpBjB,EAAKhD,EAAQoD,OAAOS,WAExB,MACJ,KAAK7D,EAAQoD,OAAOiB,cAChB,IAAK5C,QAAgC,IAAjBA,EAAKe,QACrB,OAAO,EAEXf,EAAKe,QAAUQ,EAAKhD,EAAQoD,OAAOS,UACnC,MACJ,KAAK7D,EAAQoD,OAAOkB,eAChB,IAAK7C,QAAiC,IAAlBA,EAAKgB,SACrB,OAAO,EAEXhB,EAAKgB,SAAWO,EAAKhD,EAAQoD,OAAOS,UACpC,MACJ,KAAK7D,EAAQoD,OAAOmB,eAChB,IAAM/C,EAG2B,QADzBwB,EAAKhD,EAAQoD,OAAOS,UACtBnC,SAASM,eACsB,+BAAjCP,EAAKyC,WAAWM,aACpB/C,EAAKyC,WAAWO,aACZnD,EACI0B,EAAKhD,EAAQoD,OAAOS,UACpBrC,EACAxB,GAEJyB,GAEJ,MAEJ,KAAKzB,EAAQoD,OAAOsB,cACJrF,EAAI,GAAA,IAAIM,MAAMqD,EAAKhD,EAAQoD,OAAOuB,eAAa,GAAEC,KACzD,WACI,OAAAnD,EAAKoD,YACDpD,EAAKW,WAAWY,EAAKhD,EAAQoD,OAAO7D,OADxC,IAIEY,SAAQ,SAACkC,EAAWyC,GACZ,IAAVA,IACA5B,EACIzB,EAAKW,WAAWY,EAAKhD,EAAQoD,OAAO9D,MAE5CmC,EAAKsD,aAAa1C,EAAWa,GAAa,KAC9C,IACA,MACJ,KAAKlD,EAAQoD,OAAO4B,cAChBvD,EAAKyC,WAAWW,YAAYpD,GAC5B,MACJ,KAAKzB,EAAQoD,OAAOC,WAChB,IACMT,GADAqC,EAActC,EAAM/C,SACIiD,OAAOoC,EAAYnG,OAAS,EAAG,GAAG,GAEhE,IAAK+B,EADLY,EAAOiB,EAAaK,EAAMkC,GACE,WACxB,OAAO,EAEXxD,EAAKsD,aACDzD,EACI0B,EAAKhD,EAAQoD,OAAOtC,SACE,+BAAtBW,EAAK+C,aACLxE,GAEJyB,EAAKW,WAAWQ,IAAM,MAE1B,MAEJ,KAAK5C,EAAQoD,OAAO8B,kBAChB,IAAKzD,GAA0B,IAAlBA,EAAK0D,SACd,OAAO,EAEX,IAAMjB,EAAazC,EAAKyC,WACxBA,EAAWW,YAAYpD,GACnBZ,EAAiBqD,EAAY,yBAC7BA,EAAW5D,MAAQ,IAEvB,MAEJ,KAAKN,EAAQoD,OAAOE,eAChB,IAAM2B,EACArC,GADAqC,EAActC,EAAM/C,SACIiD,OAAOoC,EAAYnG,OAAS,EAAG,GAAG,GAKhE,GAJAmE,EAAUjD,EAAQ2B,SAASC,eACvBoB,EAAKhD,EAAQoD,OAAO9C,UAExBmB,EAAOiB,EAAaK,EAAMkC,IAChB7C,WACN,OAAO,EAEXX,EAAKsD,aAAa9B,EAASxB,EAAKW,WAAWQ,IAAM,MAC7C/B,EAAiBY,EAAKyC,WAAY,yBAClCzC,EAAKyC,WAAW5D,MAAQ0C,EAAKhD,EAAQoD,OAAO9C,QAEhD,MAEJ,QACI8E,QAAQC,IAAI,kBAWpB,OANArF,EAAQsF,cAAc,CAClBtC,KAAMQ,EAAKR,KACXvB,KAAM+B,EAAK/B,KACXwB,QAAOA,KAGJ,CACX,CClNA,SAASsC,EAAKC,EAAaC,EAAqBC,GAC5C,IAAMC,EAAMH,EAAIC,GAChBD,EAAIC,GAAMD,EAAIE,GACdF,EAAIE,GAAMC,CACd,UAqEgBC,EACZ7C,EACA8C,EACA7F,IAEA6F,EAAQA,EAAMjG,SACRkG,UACND,EAAM1F,SAAQ,SAAC6C,IA1EnB,SACID,EACAC,EACAhD,GAEA,OAAQgD,EAAKhD,EAAQoD,OAAOD,SACxB,KAAKnD,EAAQoD,OAAOM,aAChBV,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAOU,gBAC7ChB,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOQ,gBAChB2B,EAAKvC,EAAMhD,EAAQoD,OAAOa,SAAUjE,EAAQoD,OAAOS,UACnDf,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOU,gBAChBd,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAOM,aAC7CZ,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOW,kBAIpB,KAAK/D,EAAQoD,OAAOe,YAIpB,KAAKnE,EAAQoD,OAAOgB,cAIpB,KAAKpE,EAAQoD,OAAOiB,cAIpB,KAAKrE,EAAQoD,OAAOkB,eAIpB,KAAKtE,EAAQoD,OAAOmB,eAChBgB,EAAKvC,EAAMhD,EAAQoD,OAAOa,SAAUjE,EAAQoD,OAAOS,UACnDf,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOsB,cAChBa,EAAKvC,EAAMhD,EAAQoD,OAAO7D,KAAMS,EAAQoD,OAAO9D,IAC/CwD,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAO4B,cAChBhC,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAOC,WAC7CP,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOC,WAChBL,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAO4B,cAC7ClC,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAO8B,kBAChBlC,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAOE,eAC7CR,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,KAAKA,EAAQoD,OAAOE,eAChBN,EAAKhD,EAAQoD,OAAOD,QAAUnD,EAAQoD,OAAO8B,kBAC7CpC,EAAUC,EAAMC,EAAMhD,GACtB,MACJ,QACIoF,QAAQC,IAAI,kBAExB,CAUQU,CAAShD,EAAMC,EAAkBhD,EACrC,GACJ,CC/EA,IAAMgG,EAAqB,SAACC,GACxB,IAAMC,EAAS,GAkBf,OAjBAA,EAAOC,KAAKF,EAAGvE,UACK,UAAhBuE,EAAGvE,UAAwC,aAAhBuE,EAAGvE,UAE1BuE,EAAG/D,aACC+D,EAAG/D,WAAkB,OACrBgE,EAAOC,KACH,GAAAtG,OAAGoG,EAAGvE,SAAY,KAAA7B,OAAAoG,EAAG/D,WAAkB,MAAEkE,QACrC,KACA,OAIRH,EAAG/D,WAAWmE,IACdH,EAAOC,KAAK,GAAAtG,OAAGoG,EAAGvE,SAAY,KAAA7B,OAAAoG,EAAG/D,WAAWmE,MAIjDH,CACX,EAEMI,EAAwB,SAACC,GAC3B,IAAMC,EAAoB,CAAA,EACpBC,EAAuB,CAAA,EAe7B,OAbAF,EAAGpG,SAAQ,SAACsB,GACRuE,EAAmBvE,GAAMtB,SAAQ,SAACuG,GAC9B,IAAMC,EAAWD,KAAcF,EAE1BG,GADWD,KAAcD,EAGnBE,WACAH,EAAkBE,GACzBD,EAAqBC,IAAc,GAHnCF,EAAkBE,IAAc,CAKxC,GACJ,IAEOF,CACX,EAEaI,EAAe,SAACC,EAAoBC,GAC7C,IAAMC,EAAWT,EAAsBO,GACjCG,EAAWV,EAAsBQ,GACjCG,EAAS,CAAA,EAQf,OANA1I,OAAO2I,KAAKH,GAAU5G,SAAQ,SAACE,GACvB2G,EAAS3G,KACT4G,EAAO5G,IAAO,EAEtB,IAEO4G,CACX,EAEaE,EAAa,SAACpE,GAIvB,cAHOA,EAAKqE,iBACLrE,EAAKsE,iBACLtE,EAAKuE,WACRvE,EAAKX,YACEW,EAAKX,WAAWmF,MAAMJ,EAIrC,EAEaK,EAAY,SAACC,GACtB,GAAIlJ,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,QAK/C,MAJ+B,CAC3B/F,SAAgC,UAAtB+F,EAAS/F,SAAuB,QAAU,WACpDG,KAAO4F,EAA8B5F,MAIzC,IAAM6F,EAA+B,CACjChG,SAAU+F,EAAS/F,UAoBvB,OAjBInD,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,gBAC/CC,EAAYxF,WAAU5D,EAAA,CAAA,EAAQmJ,EAASvF,aAEvC3D,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,aAC/CC,EAAYlF,QAAUiF,EAASjF,SAE/BjE,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,WAC/CC,EAAYpH,MAAQmH,EAASnH,OAE7B/B,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,cAC/CC,EAAYjF,SAAWgF,EAAShF,UAEhClE,OAAOS,UAAUC,eAAeC,KAAKuI,EAAU,gBAC/CC,EAAYtF,WAAaqF,EAASrF,WAAWwC,KAAI,SAAC+C,GAC9C,OAAAH,EAAUG,EAAV,KAGDD,CAEf,EAEaE,EAAU,SAACC,EAAkBC,GACtC,IACK,CAAC,WAAY,QAAS,UAAW,WAAY,QAAQP,OAClD,SAACzG,GACG,OAAI+G,EAAG/G,KAAagH,EAAGhH,EAI3B,IAGJ,OAAO,EAEX,GAAIvC,OAAOS,UAAUC,eAAeC,KAAK2I,EAAI,QAEzC,OAAO,EAIX,GAAIE,QAAQF,EAAG3F,cAAgB6F,QAAQD,EAAG5F,YACtC,OAAO,EAGX,GAAI6F,QAAQF,EAAGzF,cAAgB2F,QAAQD,EAAG1F,YACtC,OAAO,EAEX,GAAIyF,EAAG3F,WAAY,CACf,IAAM8F,EAAezJ,OAAO2I,KAAKW,EAAG3F,YAC9B+F,EAAe1J,OAAO2I,KAAKY,EAAG5F,YAEpC,GAAI8F,EAAalJ,SAAWmJ,EAAanJ,OACrC,OAAO,EAEX,IACKkJ,EAAaT,OAAM,SAACW,GACjB,OACKL,EAA2B3F,WAAWgG,KACtCJ,EAA2B5F,WAAWgG,EAK/C,IAEA,OAAO,CAEd,CACD,GAAIL,EAAGzF,WAAY,CACf,GAAIyF,EAAGzF,WAAWtD,SAAWgJ,EAAG1F,WAAWtD,OACvC,OAAO,EAEX,IACK+I,EAAGzF,WAAWmF,OAAM,SAAClF,EAAqByC,GACvC,OAAA8C,EAAQvF,EAAWyF,EAAG1F,WAAW0C,GAAjC,IAGJ,OAAO,CAEd,CAED,OAAO,CACX,EAEaqD,EAAe,SACxBN,EACAC,EACAtB,EACA4B,EACAC,GAEA,QAFA,IAAAA,IAAAA,GAAwB,IAEnBR,IAAOC,EACR,OAAO,EAGX,GAAID,EAAGnG,WAAaoG,EAAGpG,SACnB,OAAO,EAGX,GAAI,CAAC,QAAS,YAAY6B,SAASsE,EAAGnG,UAIlC,QAAO2G,GAEAR,EAAwBhG,OAAUiG,EAAwBjG,KAMrE,GAAIgG,EAAGnG,YAAY8E,EACf,OAAO,EAGX,GAAIqB,EAAG3F,YAAc4F,EAAG5F,WAAY,CAChC,GAAI2F,EAAG3F,WAAWmE,GAAI,CAClB,GAAIwB,EAAG3F,WAAWmE,KAAOyB,EAAG5F,WAAWmE,GACnC,OAAO,EAGP,GADqB,GAAGxG,OAAAgI,EAAGnG,SAAY,KAAA7B,OAAAgI,EAAG3F,WAAWmE,MACjCG,EAChB,OAAO,CAGlB,CACD,GACIqB,EAAG3F,WAAkB,OACrB2F,EAAG3F,WAAkB,QAAM4F,EAAG5F,WAAkB,MAKhD,GAHwB,GAAGrC,OAAAgI,EAAGnG,SAAQ,KAAA7B,OAAIgI,EAAG3F,WAClC,MACTkE,QAAQ,KAAM,QACOI,EACnB,OAAO,CAGlB,CAED,GAAI4B,EACA,OAAO,EAGX,IAAME,EAAYT,EAAGzF,WAAayF,EAAGzF,WAAWxC,QAAQkG,UAAY,GAC9DyC,EAAYT,EAAG1F,WAAa0F,EAAG1F,WAAWxC,QAAQkG,UAAY,GAEpE,GAAIwC,EAAUxJ,SAAWyJ,EAAUzJ,OAC/B,OAAO,EAGX,GAAIuJ,EACA,OAAOC,EAAUf,OACb,SAACzG,EAAmBgE,GAChB,OAAAhE,EAAQY,WAAa6G,EAAUzD,GAAOpD,QAAtC,IAKR,IAAM8G,EAAyB5B,EAAa0B,EAAWC,GACvD,OAAOD,EAAUf,OAAM,SAACzG,EAAmBgE,GACvC,OAAAqD,EACIrH,EACAyH,EAAUzD,GACV0D,GACA,GACA,EALJ,GASZ,EAqFMC,EAAmB,SAAC7J,EAAW8J,GACjC,OAAArJ,EAAI,GAAA,IAAIM,MAAMf,IAAE,GAAEgG,KAAI,WAAM,OAAA8D,CAAC,GAA7B,EA+DSC,EAAe,SACxBC,EACAC,GAgBA,IAbA,IAAMC,EAAcF,EAAQxG,WAAawG,EAAQxG,WAAa,GAExD2G,EAAcF,EAAQzG,WAAayG,EAAQzG,WAAa,GACxD4G,EAAUP,EAAiBK,EAAYhK,QAAQ,GAC/CmK,EAAUR,EAAiBM,EAAYjK,QAAQ,GAC/CoK,EAAU,GAEVC,EAAc,WAChB,OAAOtK,UAAU,EACrB,EAEIuK,GAAkB,eAGlB,IAAMC,EAnKY,SACtBC,EACAC,EACAP,EACAC,GAEA,IAAIO,EAAU,EACV1E,EAAkB,GAChB2E,EAAWH,EAAGxK,OACd4K,EAAWH,EAAGzK,OAGhB6K,EAAUtK,EAAI,GAAA,IAAIM,MAAM8J,EAAW,IAAI,GAAA7E,KAAI,WAAM,MAAA,EAAE,IAEjD4B,EAAoBI,EAAa0C,EAAIC,GAKvCK,EAAcH,IAAaC,EAE3BE,GACAN,EAAGrI,MAAK,SAACH,EAAmBnC,GACxB,IAAMkL,EAAS7D,EAAmBlF,GAC5BgJ,EAAS9D,EAAmBuD,EAAG5K,IACrC,OAAIkL,EAAO/K,SAAWgL,EAAOhL,QACzB8K,GAAc,GACP,IAEXC,EAAO5I,MAAK,SAAC8I,EAAapL,GACtB,GAAIoL,IAAgBD,EAAOnL,GAEvB,OADAiL,GAAc,GACP,CAEf,KACKA,QAAL,EAGJ,IAIJ,IAAK,IAAII,EAAU,EAAGA,EAAUP,EAAUO,IAEtC,IADA,IAAMC,EAAYX,EAAGU,GACZE,EAAU,EAAGA,EAAUR,EAAUQ,IAAW,CACjD,IAAMC,EAAYZ,EAAGW,GAEhBlB,EAAQgB,IACRf,EAAQiB,KACT/B,EACI8B,EACAE,EACA3D,EACAoD,GAWJD,EAAQK,EAAU,GAAGE,EAAU,GAAK,GARpCP,EAAQK,EAAU,GAAGE,EAAU,GAAKP,EAAQK,GAASE,GAC/CP,EAAQK,GAASE,GAAW,EAC5B,EACFP,EAAQK,EAAU,GAAGE,EAAU,IAAMV,IACrCA,EAAUG,EAAQK,EAAU,GAAGE,EAAU,GACzCpF,EAAQ,CAACkF,EAAU,EAAGE,EAAU,IAK3C,CAGL,OAAgB,IAAZV,GAIG,CACHvF,SAAUa,EAAM,GAAK0E,EACrB3F,SAAUiB,EAAM,GAAK0E,EACrB1K,OAAQ0K,EAEhB,CAqFuBY,CACXtB,EACAC,EACAC,EACAC,GAEAI,GACAH,EAAQ/C,KAAKkD,GACOhK,EAAI,GAAA,IAAIM,MAAM0J,EAAOvK,SAAS,GAAA8F,IAAIuE,GAC1ChJ,SAAQ,SAACkK,GACjB,OAlCC,SAACrB,EAASC,EAASI,EAAoB1K,GACpDqK,EAAQK,EAAOpF,SAAWtF,IAAK,EAC/BsK,EAAQI,EAAOxF,SAAWlF,IAAK,CACnC,CA+BgB2L,CAAStB,EAASC,EAASI,EAAQgB,EAAnC,KAGJjB,GAAkB,IAdlBA,OAoBR,OAFAR,EAAQM,QAAUA,EAClBN,EAAQ2B,WAAa,IACdrB,CACX,EAEAsB,EAAA,WAEI,SAAAA,IACIpL,KAAKqL,KAAO,EACf,CAQL,OANID,EAAGxL,UAAA0L,IAAH,SAAI7E,UACAzF,EAAAhB,KAAKqL,MAAKtE,KAAQhH,MAAAiB,EAAAyF,IAEtB2E,EAAOxL,UAAAmB,QAAP,SAAQwK,GACJvL,KAAKqL,KAAKtK,SAAQ,SAACoG,GAAa,OAAAoE,EAAGpE,EAAH,KAEvCiE,CAAD,ICvcA,SAASI,EAAoB7H,EAAuBJ,GAChD,IACIuB,EACA2G,EAFApJ,EAAOsB,EAKX,IADAJ,EAAQA,EAAM/C,QACP+C,EAAM7D,OAAS,GAClB+L,EAAYlI,EAAME,OAAO,EAAG,GAAG,GAC/BqB,EAAazC,EACbA,EAAOA,EAAKW,WAAaX,EAAKW,WAAWyI,QAAaC,EAE1D,MAAO,CACHrJ,KAAIA,EACJyC,WAAUA,EACV2G,UAASA,EAEjB,UA8TgBE,EACZhI,EACA8C,EACA7F,GAKA,OAHA6F,EAAM1F,SAAQ,SAAC6C,IAjUnB,SACID,EACAC,EACAhD,SAEIyB,EAAMyC,EAAY2G,EAEtB,IACK,CAAC7K,EAAQoD,OAAOC,WAAYrD,EAAQoD,OAAOE,gBAAgBC,SACxDP,EAAKhD,EAAQoD,OAAOD,SAE1B,CAEE,IAAM6H,EAAYJ,EAAoB7H,EAAMC,EAAKhD,EAAQoD,OAAOT,QAChElB,EAAOuJ,EAAUvJ,KACjByC,EAAa8G,EAAU9G,WACvB2G,EAAYG,EAAUH,SACzB,CAED,IAYI5H,EAEAN,EAdEsI,EAA2B,GAG3BzH,EAAO,CACTR,KAAIA,EACJvB,KAAIA,GAGR,GAAIzB,EAAQkL,oBAAoB1H,GAC5B,OAAO,EAOX,OAAQR,EAAKhD,EAAQoD,OAAOD,SACxB,KAAKnD,EAAQoD,OAAOM,aACXjC,EAAKS,aACNT,EAAKS,WAAa,IAGtBT,EAAKS,WAAWc,EAAKhD,EAAQoD,OAAOO,OAChCX,EAAKhD,EAAQoD,OAAO9C,OAEU,YAA9B0C,EAAKhD,EAAQoD,OAAOO,MACpBlC,EAAKe,SAAU,EACsB,aAA9BQ,EAAKhD,EAAQoD,OAAOO,MAC3BlC,EAAKgB,UAAW,EAEE,UAAlBhB,EAAKC,UACyB,UAA9BsB,EAAKhD,EAAQoD,OAAOO,QAEpBlC,EAAKnB,MAAQ0C,EAAKhD,EAAQoD,OAAO9C,QAGrC,MACJ,KAAKN,EAAQoD,OAAOQ,gBAChBnC,EAAKS,WAAWc,EAAKhD,EAAQoD,OAAOO,OAChCX,EAAKhD,EAAQoD,OAAOS,UACxB,MACJ,KAAK7D,EAAQoD,OAAOU,uBACTrC,EAAKS,WAAWc,EAAKhD,EAAQoD,OAAOO,OAEC,IAAxCpF,OAAO2I,KAAKzF,EAAKS,YAAYpD,eACtB2C,EAAKS,WAGkB,YAA9Bc,EAAKhD,EAAQoD,OAAOO,MACpBlC,EAAKe,SAAU,EACsB,aAA9BQ,EAAKhD,EAAQoD,OAAOO,aACpBlC,EAAKgB,SAEM,UAAlBhB,EAAKC,UACyB,UAA9BsB,EAAKhD,EAAQoD,OAAOO,cAEblC,EAAKnB,MAGhB,MACJ,KAAKN,EAAQoD,OAAOW,kBAChBtC,EAAKI,KAAOmB,EAAKhD,EAAQoD,OAAOS,UACJ,aAAxBK,EAAWxC,WACXwC,EAAW5D,MAAQ0C,EAAKhD,EAAQoD,OAAOS,WAE3C,MACJ,KAAK7D,EAAQoD,OAAOe,YAChB1C,EAAKnB,MAAQ0C,EAAKhD,EAAQoD,OAAOS,UACjC,MACJ,KAAK7D,EAAQoD,OAAOgB,cAChB3C,EAAKI,KAAOmB,EAAKhD,EAAQoD,OAAOS,UAChC,MACJ,KAAK7D,EAAQoD,OAAOiB,cAChB5C,EAAKe,QAAUQ,EAAKhD,EAAQoD,OAAOS,UACnC,MACJ,KAAK7D,EAAQoD,OAAOkB,eAChB7C,EAAKgB,SAAWO,EAAKhD,EAAQoD,OAAOS,UACpC,MACJ,KAAK7D,EAAQoD,OAAOmB,eAChBtB,EAAUuE,EAAUxE,EAAKhD,EAAQoD,OAAOS,WACxCK,EAAW9B,WAAWyI,GAAa5H,EACnC,MACJ,KAAKjD,EAAQoD,OAAOsB,cACJjD,EAAKW,WACZS,OACGG,EAAKhD,EAAQoD,OAAO7D,MACpByD,EAAKhD,EAAQoD,OAAOuB,cAEvBmB,UACK3F,SAAQ,SAACgL,GACf,OAAA1J,EAAKW,WAAWS,OAAOG,EAAKhD,EAAQoD,OAAO9D,IAAK,EAAG6L,EAAnD,IAEA1J,EAAKyH,SACLzH,EAAKyH,QAAQ/I,SAAQ,SAACyE,GAClB,GACI5B,EAAKhD,EAAQoD,OAAO7D,MAAQyD,EAAKhD,EAAQoD,OAAO9D,KAChDsF,EAAIX,UAAYjB,EAAKhD,EAAQoD,OAAO9D,KACpCsF,EAAIX,SAAWjB,EAAKhD,EAAQoD,OAAO7D,MAEnCqF,EAAIX,UAAYjB,EAAKhD,EAAQoD,OAAOuB,cAC9ByG,EACFxG,EAAIX,SAAWW,EAAI9F,OAASkE,EAAKhD,EAAQoD,OAAO9D,KAClC,IAEd2L,EAAW9E,KAAK,CACZlC,SACIjB,EAAKhD,EAAQoD,OAAO9D,IACpB0D,EAAKhD,EAAQoD,OAAOuB,aACxBd,SACIe,EAAIf,SAAWe,EAAI9F,OAASsM,EAChCtM,OAAQsM,IAEZxG,EAAI9F,QAAUsM,QAEf,GACHpI,EAAKhD,EAAQoD,OAAO7D,MAAQyD,EAAKhD,EAAQoD,OAAO9D,KAChDsF,EAAIX,SAAWjB,EAAKhD,EAAQoD,OAAO9D,KACnCsF,EAAIX,SAAWjB,EAAKhD,EAAQoD,OAAO7D,MACrC,CAEE,IAAM6L,EADNxG,EAAIX,UAAYjB,EAAKhD,EAAQoD,OAAOuB,cAC9ByG,EACFxG,EAAIX,SAAWW,EAAI9F,OAASkE,EAAKhD,EAAQoD,OAAO9D,KAClC,IAEd2L,EAAW9E,KAAK,CACZlC,SACIjB,EAAKhD,EAAQoD,OAAO9D,IACpB0D,EAAKhD,EAAQoD,OAAOuB,aACxBd,SACIe,EAAIf,SAAWe,EAAI9F,OAASsM,EAChCtM,OAAQsM,IAEZxG,EAAI9F,QAAUsM,EAErB,MAAUxG,EAAIX,WAAajB,EAAKhD,EAAQoD,OAAO7D,QAC5CqF,EAAIX,SAAWjB,EAAKhD,EAAQoD,OAAO9D,IAE3C,IAGJ,MACJ,KAAKU,EAAQoD,OAAO4B,cAChBd,EAAW9B,WAAWS,OAAOgI,EAAW,GACpC3G,EAAWgF,SACXhF,EAAWgF,QAAQ/I,SAAQ,SAACyE,GACpBA,EAAIX,SAAW4G,EACfjG,EAAIX,UAAY,EACTW,EAAIX,WAAa4G,EACxBjG,EAAU,QAAG,EAEbA,EAAIX,SAAW4G,GACfjG,EAAIX,SAAWW,EAAI9F,OAAS+L,IAExBjG,EAAIX,SAAWW,EAAI9F,OAAS,IAAM+L,EAClCjG,EAAI9F,UAEJmM,EAAW9E,KAAK,CACZtC,SACIe,EAAIf,SAAWgH,EAAYjG,EAAIX,SACnCA,SAAU4G,EACV/L,OACI8F,EAAI9F,OAAS+L,EAAYjG,EAAIX,SAAW,IAEhDW,EAAI9F,OAAS+L,EAAYjG,EAAIX,UAGzC,IAEJxC,EAAOyC,EACP,MACJ,KAAKlE,EAAQoD,OAAOC,WAEhB,IAAMgI,GADN1I,EAAQK,EAAKhD,EAAQoD,OAAOT,OAAO/C,SACXiD,OAAOF,EAAM7D,OAAS,EAAG,GAAG,GACpD2C,EAAyC,QAAlCrB,EAAAwK,EAAoB7H,EAAMJ,UAAQ,IAAAvC,OAAA,EAAAA,EAAAqB,KACzCwB,EAAUuE,EAAUxE,EAAKhD,EAAQoD,OAAOtC,UAEnCW,EAAKW,aACNX,EAAKW,WAAa,IAGlBiJ,GAAK5J,EAAKW,WAAWtD,OACrB2C,EAAKW,WAAW+D,KAAKlD,GAErBxB,EAAKW,WAAWS,OAAOwI,EAAG,EAAGpI,GAE7BxB,EAAKyH,SACLzH,EAAKyH,QAAQ/I,SAAQ,SAACyE,GAClB,GAAIA,EAAIX,UAAYoH,EAChBzG,EAAIX,UAAY,OACb,GACHW,EAAIX,SAAWoH,GACfzG,EAAIX,SAAWW,EAAI9F,OAASuM,EAC9B,CACE,IAAMD,EAAcxG,EAAIX,SAAWW,EAAI9F,OAASuM,EAChDJ,EAAW9E,KAAK,CACZtC,SAAUe,EAAIf,SAAWe,EAAI9F,OAASsM,EACtCnH,SAAUoH,EAAI,EACdvM,OAAQsM,IAEZxG,EAAI9F,QAAUsM,CACjB,CACL,IAEJ,MAEJ,KAAKpL,EAAQoD,OAAO8B,kBAChBhB,EAAW9B,WAAWS,OAAOgI,EAAW,GACZ,aAAxB3G,EAAWxC,iBACJwC,EAAW5D,MAElB4D,EAAWgF,SACXhF,EAAWgF,QAAQ/I,SAAQ,SAACyE,GACpBA,EAAIX,SAAW4G,EACfjG,EAAIX,UAAY,EACTW,EAAIX,WAAa4G,EACxBjG,EAAU,QAAG,EAEbA,EAAIX,SAAW4G,GACfjG,EAAIX,SAAWW,EAAI9F,OAAS+L,IAExBjG,EAAIX,SAAWW,EAAI9F,OAAS,IAAM+L,EAClCjG,EAAI9F,UAEJmM,EAAW9E,KAAK,CACZtC,SACIe,EAAIf,SAAWgH,EAAYjG,EAAIX,SACnCA,SAAU4G,EACV/L,OACI8F,EAAI9F,OAAS+L,EAAYjG,EAAIX,SAAW,IAEhDW,EAAI9F,OAAS+L,EAAYjG,EAAIX,UAGzC,IAEJxC,EAAOyC,EACP,MACJ,KAAKlE,EAAQoD,OAAOE,eAEhB,IAAMgI,GADN3I,EAAQK,EAAKhD,EAAQoD,OAAOT,OAAO/C,SACXiD,OAAOF,EAAM7D,OAAS,EAAG,GAAG,GACpDmE,EAAU,CACNvB,SAAU,QACVG,KAAMmB,EAAKhD,EAAQoD,OAAO9C,SAE9BmB,EAAOmJ,EAAoB7H,EAAMJ,GAAOlB,MAC9BW,aACNX,EAAKW,WAAa,IAGlBkJ,GAAK7J,EAAKW,WAAWtD,OACrB2C,EAAKW,WAAW+D,KAAKlD,GAErBxB,EAAKW,WAAWS,OAAOyI,EAAG,EAAGrI,GAEX,aAAlBxB,EAAKC,WACLD,EAAKnB,MAAQ0C,EAAKhD,EAAQoD,OAAOS,WAEjCpC,EAAKyH,SACLzH,EAAKyH,QAAQ/I,SAAQ,SAACyE,GAIlB,GAHIA,EAAIX,UAAYqH,IAChB1G,EAAIX,UAAY,GAEhBW,EAAIX,SAAWqH,GAAK1G,EAAIX,SAAWW,EAAI9F,OAASwM,EAAG,CACnD,IAAMF,EAAcxG,EAAIX,SAAWW,EAAI9F,OAASwM,EAChDL,EAAW9E,KAAK,CACZtC,SAAUe,EAAIf,SAAWe,EAAI9F,OAASsM,EACtCnH,SAAUqH,EAAI,EACdxM,OAAQsM,IAEZxG,EAAI9F,QAAUsM,CACjB,CACL,IAEJ,MAEJ,QACIhG,QAAQC,IAAI,kBAGhB5D,EAAKyH,UACLzH,EAAKyH,QAAUzH,EAAKyH,QAAQqC,QACxB,SAAC3G,GAAoB,OAACA,EAAU,QAAIA,EAAIX,WAAaW,EAAIf,QAApC,IAErBoH,EAAWnM,SACX2C,EAAKyH,QAAUzH,EAAKyH,QAAQrJ,OAAOoL,KAI3CjL,EAAQwL,qBAAqB,CACzB/J,KAAM+B,EAAK/B,KACXuB,KAAMQ,EAAKR,KACXC,QAAOA,GAIf,CAQQwI,CAAiB1I,EAAMC,EAAMhD,EACjC,KACO,CACX,CCzVgB,SAAA0L,EACZC,EACA3L,QAAA,IAAAA,IAAAA,EAAA,CAAmCuC,cAAc,IAEjD,IAAMhB,EAA0C,CAC5CG,SAAUiK,EAAMjK,UAEpB,GAAIb,EAAiB8K,EAAO,OAAQ,WAC9BpK,EAAoCM,KAClC8J,EACF9J,SACC,CACH,GAAI8J,EAAMzJ,YAAcyJ,EAAMzJ,WAAWpD,OAAS,EAC9CyC,EAAQW,WAAa,GACHvC,MAAMX,UAAUY,MAAMV,KAAKyM,EAAMzJ,YACzC/B,SACN,SAAC+H,GACG,OAAC3G,EAAQW,WAAWgG,EAAUvE,MAAQuE,EAAU5H,KAAhD,IAGZ,GAAIqL,EAAMvJ,YAAcuJ,EAAMvJ,WAAWtD,OAAS,EAC9CyC,EAAQa,WAAa,GACHzC,MAAMX,UAAUY,MAAMV,KAAKyM,EAAMvJ,YACzCjC,SAAQ,SAACkC,GACf,OAAAd,EAAQa,WAAW+D,KAAKuF,EAAUrJ,EAAWrC,GAA7C,IAGJA,EAAQuC,eACJ1B,EAAiB8K,EAAO,yBACxBpK,EAAQjB,MAASqL,EAA8BrL,OAG/CO,EAAiB8K,EAAO,qBACxB,CAAC,QAAS,YAAYpI,SACjBoI,EAA2BC,KAAK5J,qBAEG8I,IAAvCa,EAA2BnJ,QAE5BjB,EAAQiB,QAAWmJ,EAA2BnJ,QAE9C3B,EACI8K,EACA,oBACA,kBACA,mBACA,gBACA,mBACA,oBACA,sBACA,sBAGJpK,EAAQjB,MACJqL,EASFrL,OAEFO,EAAiB8K,EAAO,uBACxBpK,EAAQkB,SAAYkJ,EAA4BlJ,UAG3D,CACD,OAAOlB,CACX,CCrEA,IAAMsK,EACF,2GAEEC,EAAS,qDAEf,SAASC,EAASC,GACd,OAAOA,EACF5F,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,SAAU,IAC3B,CAKA,IAAM6F,EAAS,CACXC,MAAM,EACNC,MAAM,EACNC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,OAAO,EACPC,KAAK,GAGHC,EAAW,SAACC,EAAaC,GAC3B,IAAMC,EAAM,CACR3L,SAAU,GACVQ,WAAY,CAAE,GAEdoL,GAAc,EAGdC,EAAWJ,EAAIK,MAAM,uBACzB,GAAID,IACAF,EAAI3L,SACA0L,GAAiC,QAAhBG,EAAS,GACpBA,EAAS,GACTA,EAAS,GAAGE,eAClBxB,EAAOsB,EAAS,KAAsC,MAA/BJ,EAAIO,OAAOP,EAAIrO,OAAS,MAC/CwO,GAAc,GAIdD,EAAI3L,SAASiM,WAAW,QAAQ,CAChC,IAAMC,EAAWT,EAAIU,QAAQ,UAC7B,MAAO,CACHjC,KAAM,UACNnK,KAAM,CACFC,SAAU,WACVG,MAAoB,IAAd+L,EAAkBT,EAAIvN,MAAM,EAAGgO,GAAY,IAErDN,YAAWA,EAElB,CAML,IAHA,IAAIQ,EAAM,IAAIC,OAAOjC,GACjBkC,EAAS,KACTC,GAAO,GACHA,GAGJ,GAAe,QAFfD,EAASF,EAAII,KAAKf,IAGdc,GAAO,OACJ,GAAID,EAAO,GAAGG,OACjB,GAAIH,EAAO,GAAI,CACX,IAAII,EAAOJ,EAAO,GAAGG,OACjBE,EAAM,CAACD,EAAM,IAEbA,EAAKP,QAAQ,MAAQ,IAAGQ,EAAMD,EAAKE,MAAM,MAC7CjB,EAAInL,WAAWmM,EAAI,IAAMA,EAAI,GAC7BP,EAAIS,WACP,MAAUP,EAAO,KACdX,EAAInL,WAAW8L,EAAO,IAAMA,EAAO,GAC9BG,OACAK,UAAU,EAAGR,EAAO,GAAGlP,OAAS,IAIjD,MAAO,CACH8M,KAlDO,MAmDPnK,KAAM4L,EACNC,YAAWA,EAEnB,EAEamB,EAAc,SACvBC,EACA1O,QAAA,IAAAA,IAAAA,EAAA,CACIuC,cAAc,EACd6K,eAAe,IAGnB,IACIuB,EADEX,EAAqB,GAEvBY,GAAS,EACPP,EAAgE,GAElE7M,GAAY,EAGhB,GAA0B,IAAtBkN,EAAKb,QAAQ,KAAY,CACzB,IAAMgB,EAAMH,EAAKb,QAAQ,KACzBG,EAAO7H,KAAK,CACRzE,SAAU,QACVG,MAAe,IAATgN,EAAaH,EAAOA,EAAKF,UAAU,EAAGK,IAEnD,CAoHD,OAlHAH,EAAKtI,QAAQyF,GAAO,SAACsB,EAAarI,GAQ9B,IAAMgK,EAA2B,MAAlB3B,EAAIO,OAAO,GACpBqB,EAAY5B,EAAIQ,WAAW,WAC3BqB,EAAQlK,EAAQqI,EAAIrO,OACpBmQ,EAAWP,EAAKhB,OAAOsB,GAE7B,GAAID,EAAW,CACX,IAAMG,EAAUhC,EAASC,EAAKnN,EAAQoN,eAAe3L,KAGrD,GAAImN,EAAQ,EAER,OADAZ,EAAO7H,KAAK+I,GACL,GAEX,IAAMC,EAASd,EAAIO,GAOnB,OANIO,GAAUD,EAAQxN,WACbyN,EAAO1N,KAAKW,aACb+M,EAAO1N,KAAKW,WAAa,IAE7B+M,EAAO1N,KAAKW,WAAW+D,KAAK+I,IAEzB,EACV,CAED,GAAIJ,EAAQ,CAMR,GAJ8B,SAD9BH,EAAUzB,EAASC,EAAKnN,EAAQoN,eAAiB5L,IACrCC,KAAKC,WACbF,GAAY,GAEhBoN,KAEKD,EAAQrB,aAET2B,GACa,MAAbA,EACF,CACON,EAAQlN,KAAKW,aACduM,EAAQlN,KAAKW,WAAa,IAE9B,IAAMP,EAAOkK,EACT2C,EAAK9O,MAAMoP,EAAON,EAAKb,QAAQ,IAAKmB,KAExCL,EAAQlN,KAAKW,WAAW+D,KAAK,CACzBzE,SAAU,QACVG,KAAIA,IAGJ7B,EAAQuC,cACkB,aAA1BoM,EAAQlN,KAAKC,WAEbiN,EAAQlN,KAAKnB,MAAQuB,EAE5B,CAEa,IAAV+M,GAAeD,EAAQlN,KAAKC,UAC5BsM,EAAO7H,KAAKwI,EAAQlN,MAGxB,IAAM2N,EAASf,EAAIO,EAAQ,GACvBQ,GAAUT,EAAQlN,KAAKC,WAClB0N,EAAO3N,KAAKW,aACbgN,EAAO3N,KAAKW,WAAa,IAE7BgN,EAAO3N,KAAKW,WAAW+D,KAAKwI,EAAQlN,OAExC4M,EAAIO,GAASD,CAChB,CACD,KAAKG,GAAUH,EAAQrB,eAEfsB,GAAS,IACRD,EAAQrB,aACJtN,EAAQoN,eACLuB,EAAQlN,KAAKC,WAAayL,EAAIvN,MAAM,GAAI,KAC1CI,EAAQoN,eACNuB,EAAQlN,KAAKC,SAAS+L,gBAClBN,EAAIvN,MAAM,GAAI,GAAG6N,kBAE7BmB,GAEa,IACqB,QAA1BD,EAAQlN,KAAKC,WACbF,GAAY,GAEhBmN,EAAUN,EAAIO,IAGW,MAAbK,GAAoBA,GAAU,CAI9C,IAAM7M,GACS,IAAXwM,EAAeZ,EAASK,EAAIO,GAAOnN,KAAKW,YAAc,GAIpDyM,EAAMH,EAAKb,QAAQ,IAAKmB,GAC1BnN,EAAOkK,EACP2C,EAAK9O,MAAMoP,GAAgB,IAATH,OAAa/D,EAAY+D,IAE/CzM,EAAW+D,KAAK,CACZzE,SAAU,QACVG,KAAIA,GAEX,CAEL,MAAO,EACX,IACOmM,EAAO,EAClB,ECtNAqB,EAAA,WAUI,SAAAA,EACIC,EACAC,EACAvP,GAEAZ,KAAKY,QAAUA,EACfZ,KAAKoQ,GACkB,oBAAZC,SACP5O,EAAiByO,EAAQ,WACnB5D,EAAU4D,EAAmBlQ,KAAKY,SAChB,iBAAXsP,EACLb,EAAYa,EAAQlQ,KAAKY,SACzBQ,KAAKkP,MAAMlP,KAAKC,UAAU6O,IAEtClQ,KAAKuQ,GACkB,oBAAZF,SACP5O,EAAiB0O,EAAQ,WACnB7D,EAAU6D,EAAmBnQ,KAAKY,SAChB,iBAAXuP,EACLd,EAAYc,EAAQnQ,KAAKY,SACzBQ,KAAKkP,MAAMlP,KAAKC,UAAU8O,IAEtCnQ,KAAKwQ,UAAY,EACjBxQ,KAAKyQ,UAAW,EACZzQ,KAAK0Q,QACL1Q,KAAK2Q,OACkB,oBAAZN,SACP5O,EAAiByO,EAAQ,WACnB5D,EAAU4D,EAAmBlQ,KAAKY,SAChB,iBAAXsP,EACLb,EAAYa,EAAQlQ,KAAKY,SACzBQ,KAAKkP,MAAMlP,KAAKC,UAAU6O,IACtClQ,KAAK4Q,OACkB,oBAAZP,SACP5O,EAAiB0O,EAAQ,WACnB7D,EAAU6D,EAAmBnQ,KAAKY,SAChB,iBAAXuP,EACLd,EAAYc,EAAQnQ,KAAKY,SACzBQ,KAAKkP,MAAMlP,KAAKC,UAAU8O,KAG1CnQ,KAAK6Q,QAAU,IAAIzF,CACtB,CA0wBL,OAxwBI6E,EAAArQ,UAAAkR,KAAA,WACI,OAAO9Q,KAAK+Q,UAAU/Q,KAAKoQ,GAAIpQ,KAAKuQ,KAGxCN,EAAArQ,UAAAmR,UAAA,SAAUX,EAAyBG,GAC/B,IAAI9J,EACJ,EAAG,CACC,GAAIzG,KAAKY,QAAQ8P,QACb1Q,KAAKwQ,WAAa,EACdxQ,KAAKwQ,UAAYxQ,KAAKY,QAAQoQ,SAC9B,MAAM,IAAIC,MACN,qBAAAxQ,OAAqBW,KAAKC,UACtBrB,KAAK2Q,QACD,QAAAlQ,OAAAW,KAAKC,UAAUrB,KAAK4Q,UAMnB,KAFrBnK,EAAQzG,KAAKkR,aAAad,EAAIG,EAAI,KAExB7Q,SAID8I,EAAQ4H,EAAIG,KACTvQ,KAAKyQ,SACLzK,QAAQmL,MAAM,oCAEdnR,KAAKyQ,UAAW,EAChB1I,EAAWqI,GACX3J,EAAQzG,KAAKkR,aAAad,EAAIG,EAAI,OAI1C9J,EAAM/G,OAAS,IACfM,KAAKyQ,UAAW,EAChBzQ,KAAK6Q,QAAQvF,IAAI7E,GACjBkF,EAAayE,EAAI3J,EAAOzG,KAAKY,SAEpC,OAAQ6F,EAAM/G,OAAS,GAExB,OAAOM,KAAK6Q,QAAQxF,MAGxB4E,EAAArQ,UAAAsR,aAAA,SAAad,EAAkBG,EAAkBhN,GAC7C,IAAIkD,EACA2K,EAEJ,GAAIpR,KAAKY,QAAQyQ,UAAY9N,EAAM7D,OAASM,KAAKY,QAAQyQ,SACrD,MAAO,GAGX,IAAKjB,EAAGpI,UAAW,CAMf,GALAvB,EAAQzG,KAAKsR,cAAclB,EAAIG,EAAIhN,GAC/BvD,KAAKY,QAAQ2Q,kBACbH,EAASpR,KAAKY,QAAQ2Q,gBAAgBnB,EAAIG,EAAI9J,MAClCA,EAAQ2K,GAEpB3K,EAAM/G,OAAS,EAEf,OADA0Q,EAAGpI,WAAY,EACRvB,EAEP2J,EAAGpI,WAAY,CAEtB,CACD,GAAI7I,OAAOS,UAAUC,eAAeC,KAAKsQ,EAAI,QAEzC,MAAO,GAMX,IAAKA,EAAGnI,UAAW,CAEf,IADAxB,EAAQzG,KAAKwR,cAAcpB,EAAIG,EAAIhN,IACzB7D,OAAS,EACf,OAAO+G,EAEP2J,EAAGnI,WAAY,CAEtB,CAED,GAAIjI,KAAKY,QAAQuC,eAAiBiN,EAAGlI,UAAW,CAI5C,IAFAzB,EAAQzG,KAAKyR,cAAcrB,EAAIG,EAAIhN,IAEzB7D,OAAS,EAEf,OADA0Q,EAAGlI,WAAY,EACRzB,EAEP2J,EAAGlI,WAAY,CAEtB,CAGD,MAAO,IAGX+H,EAAArQ,UAAA0R,cAAA,SAAclB,EAAkBG,EAAkBhN,GAC9C,IACIyL,EACA0C,EACAC,EACAC,EACAC,EACAtS,EANEkH,EAAQ,GAOd,GAAI2J,EAAG9N,WAAaiO,EAAGjO,SAAU,CAC7B,IAAKiB,EAAM7D,OACP,MAAM,IAAIuR,MAAM,gDAEpB,MAAO,EACH,IAAItQ,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOmB,gBAEvB7D,SAAStB,KAAKY,QAAQoD,OAAOa,SAAUuD,EAAUgI,IACjD9O,SAAStB,KAAKY,QAAQoD,OAAOS,SAAU2D,EAAUmI,IACjDjP,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GAEhD,CACD,GACIA,EAAM7D,QACNM,KAAKY,QAAQoQ,QACTc,KAAKC,KACA3B,EAAGpN,YAAc,IAAItD,QAAU6Q,EAAGvN,YAAc,IAAItD,QAG7D,MAAO,EACH,IAAIiB,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOmB,gBAEvB7D,SAAStB,KAAKY,QAAQoD,OAAOa,SAAUuD,EAAUgI,IACjD9O,SAAStB,KAAKY,QAAQoD,OAAOS,SAAU2D,EAAUmI,IACjDjP,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,IAIjD,GACIpE,OAAOS,UAAUC,eAAeC,KAAKsQ,EAAI,SACxCA,EAAwB3N,OAAU8N,EAAwB9N,KAG3D,MAAoB,UAAhB2N,EAAG9N,SACI,EACH,IAAI3B,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOW,mBAEvBrD,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GACpCjC,SACGtB,KAAKY,QAAQoD,OAAOa,SACnBuL,EAAwB3N,MAE5BnB,SACGtB,KAAKY,QAAQoD,OAAOS,SACnB8L,EAAwB9N,OAI9B,EACH,IAAI9B,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOgB,eAEvB1D,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GACpCjC,SACGtB,KAAKY,QAAQoD,OAAOa,SACnBuL,EAAwB3N,MAE5BnB,SACGtB,KAAKY,QAAQoD,OAAOS,SACnB8L,EAAwB9N,OAa7C,IAJAiP,EAAQtB,EAAGtN,WAAa3D,OAAO2I,KAAKsI,EAAGtN,YAAYkP,OAAS,GAC5DL,EAAQpB,EAAGzN,WAAa3D,OAAO2I,KAAKyI,EAAGzN,YAAYkP,OAAS,GAE5DJ,EAAaF,EAAMhS,OACdH,EAAI,EAAGA,EAAIqS,EAAYrS,IACxByP,EAAO0C,EAAMnS,IAEA,KADbsS,EAAMF,EAAMlD,QAAQO,IAEhBvI,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOU,iBAEvBpD,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GACpCjC,SAAStB,KAAKY,QAAQoD,OAAOO,KAAMyK,GACnC1N,SACGtB,KAAKY,QAAQoD,OAAO9C,MACpBkP,EAAGtN,WAAWkM,MAI1B2C,EAAMlO,OAAOoO,EAAK,GACdzB,EAAGtN,WAAWkM,KAAUuB,EAAGzN,WAAWkM,IACtCvI,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOQ,iBAEvBlD,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GACpCjC,SAAStB,KAAKY,QAAQoD,OAAOO,KAAMyK,GACnC1N,SACGtB,KAAKY,QAAQoD,OAAOa,SACpBuL,EAAGtN,WAAWkM,IAEjB1N,SACGtB,KAAKY,QAAQoD,OAAOS,SACpB8L,EAAGzN,WAAWkM,MAQtC,IADA4C,EAAaD,EAAMjS,OACdH,EAAI,EAAGA,EAAIqS,EAAYrS,IACxByP,EAAO2C,EAAMpS,GACbkH,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOM,cAEvBhD,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GACpCjC,SAAStB,KAAKY,QAAQoD,OAAOO,KAAMyK,GACnC1N,SAAStB,KAAKY,QAAQoD,OAAO9C,MAAOqP,EAAGzN,WAAWkM,KAI/D,OAAOvI,GAGXwJ,EAAArQ,UAAA4R,cAAA,SACIpB,EACAG,EACAhN,GAEA,IAAM0O,EAAe7B,EAAGpN,WAAaoN,EAAGpN,WAAWxC,QAAU,GACvD0R,EAAe3B,EAAGvN,WAAauN,EAAGvN,WAAWxC,QAAU,GACvD2R,EAAOL,KAAKM,IAAIH,EAAavS,OAAQwS,EAAaxS,QACpD2S,EAA6BP,KAAKC,IAClCE,EAAavS,OAASwS,EAAaxS,QAEnC+G,EAAgB,GAChBf,EAAQ,EACZ,IAAK1F,KAAKY,QAAQ0R,eAAiBH,EAAOnS,KAAKY,QAAQ0R,cAAe,CAClE,IAAMC,EAAiB5J,QAAQyH,EAAGtG,SAAWsG,EAAGjF,cAC1CqH,EAAWD,EACXnC,EAAGtG,QACHsG,EAAGpN,YAAcuN,EAAGvN,WAClBuG,EAAa6G,EAAIG,GACjB,GACR,GAAIiC,EAAS9S,OAAS,IAIlB+G,EAAQzG,KAAKyS,uBACTrC,EACAG,EACAiC,EACAjP,EACAgP,IAEM7S,OAAS,EACf,OAAO+G,CAGlB,CASD,IAAK,IAAIlH,EAAI,EAAGA,EAAI4S,EAAM5S,GAAK,EAAG,CAC9B,IAAMkJ,EAAKwJ,EAAa1S,GAClBmJ,EAAKwJ,EAAa3S,GAEpB8S,IAGI5J,IAAOC,EACa,UAAhBD,EAAGnG,UACHmE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO8B,mBAEvBxE,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,IAEhBpE,SACGtB,KAAKY,QAAQoD,OAAO9C,MACnBuH,EAAwBhG,OAGrCiD,GAAS,IAETe,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO4B,eAEvBtE,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,IAEhBpE,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAUK,KAGtB/C,GAAS,GAENgD,IAAOD,IACM,UAAhBC,EAAGpG,SACHmE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOE,gBAEvB5C,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,IAEhBpE,SACGtB,KAAKY,QAAQoD,OAAO9C,MACnBwH,EAAwBjG,OAIrCgE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOC,YAEvB3C,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,IAEhBpE,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAUM,OAc9BD,GAAMC,KAED1I,KAAKY,QAAQ0R,eACdH,EAAOnS,KAAKY,QAAQ0R,cAEpB7L,EAAQA,EAAMhG,OACVT,KAAKkR,aAAazI,EAAIC,EAAInF,EAAM9C,OAAOiF,KAEnC8C,EAAQC,EAAIC,KAChBuJ,EAAavS,OAASwS,EAAaxS,QACf,UAAhB+I,EAAGnG,SACHmE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO8B,mBAEvBxE,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,IAEhBpE,SACGtB,KAAKY,QAAQoD,OAAO9C,MACnBuH,EAAwBhG,OAIrCgE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO4B,eAEvBtE,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAUK,IAEbnH,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,KAI7BuM,EAAaxO,OAAOlE,EAAG,GACvBA,GAAK,EACLmG,GAAS,EAET2M,GAA8B,GACvBJ,EAAavS,OAASwS,EAAaxS,QAC1C+G,EAAQA,EAAMhG,OAAO,EACjB,IAAIE,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOC,YAEvB3C,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAUM,IAEbpH,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,MAGzBuM,EAAaxO,OAAOlE,EAAG,EAAG6I,EAAUM,IACpC2J,GAA8B,GAE9B5L,EAAQA,EAAMhG,OAAO,EACjB,IAAIE,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOmB,gBAEvB7D,SACGtB,KAAKY,QAAQoD,OAAOa,SACpBuD,EAAUK,IAEbnH,SACGtB,KAAKY,QAAQoD,OAAOS,SACpB2D,EAAUM,IAEbpH,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOiF,QAMrCA,GAAS,CACZ,CAED,OADA0K,EAAGnI,WAAY,EACRxB,GAGXwJ,EAAsBrQ,UAAA6S,uBAAtB,SACIrC,EACAG,EACAiC,EACAjP,EACAgP,GAqBA,IAZA,IAMIG,EACAC,EACAC,EACAvQ,EACAwQ,EAVEC,EJvMmB,SAC7B1C,EACAG,EACAwC,GAEA,IAAMC,EAA2B5C,EAAGpN,WAC7BqG,EAAiB+G,EAAGpN,WAAWtD,QAAQ,GACxC,GACAuT,EAA2B1C,EAAGvN,WAC7BqG,EAAiBkH,EAAGvN,WAAWtD,QAAQ,GACxC,GACFkT,EAAQ,EAgBZ,OAbAG,EAAOhS,SAAQ,SAACkJ,GAIZ,IAHA,IAAMiJ,EAASjJ,EAAOpF,SAAWoF,EAAOvK,OAClCyT,EAASlJ,EAAOxF,SAAWwF,EAAOvK,OAE/B0T,EAAInJ,EAAOpF,SAAUuO,EAAIF,EAAQE,GAAK,EAC3CJ,EAAMI,GAAKR,EAEf,IAASQ,EAAInJ,EAAOxF,SAAU2O,EAAID,EAAQC,GAAK,EAC3CH,EAAMG,GAAKR,EAEfA,GAAS,CACb,IAEO,CACHI,MAAKA,EACLC,MAAKA,EAEb,CIwK+BI,CAAkBjD,EAAIG,EAAIiC,GAC3CQ,EAAQF,EAAeE,MACvBC,EAAQH,EAAeG,MACvBhB,EAAe7B,EAAGpN,WAAWxC,QAC7B0R,EAAe3B,EAAGvN,WAAWxC,QAC/B8S,EAAWxB,KAAKyB,IAAIP,EAAMtT,OAAQuT,EAAMvT,QAMtC+G,EAAQ,GAEN+M,EAAS,EAAGC,EAAS,EACzBD,EAASF,EACTG,GAAU,EAAGD,GAAU,EAEvB,IACIjB,IACmB,IAAlBS,EAAMQ,KAAsC,IAAlBP,EAAMO,IAG9B,IAAsB,IAAlBR,EAAMS,GAEb,GAAsB,WADtBpR,EAAO4P,EAAawB,IACXnR,SACL,GAAsC,UAAlC4P,EAAasB,GAAQlR,UACrB,GACKD,EAA0BI,OAC1ByP,EAAasB,GAA6B/Q,KAC7C,CAGE,IADA,IAAIiR,EAAQD,EAERxB,EAAavS,OAASgU,EAAQ,GACO,UAArCzB,EAAayB,EAAQ,GAAGpR,UAGxB,GADAoR,GAAS,EAEJxB,EAAasB,GACT/Q,OACJwP,EAAayB,GACTjR,KACP,CACEoQ,GAAc,EACd,KACH,CAEAA,GACDpM,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OACRW,mBAERrD,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,IAEhBnS,SACGtB,KAAKY,QAAQoD,OAAOa,SACpBxC,EAAKI,MAERnB,SACGtB,KAAKY,QAAQoD,OAAOS,SAEhByN,EACIsB,GAEN/Q,MAMrB,OAEDgE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO8B,mBAEvBxE,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,IAEhBnS,SAAStB,KAAKY,QAAQoD,OAAO9C,MAAOmB,EAAKI,OAElDuQ,EAAMvP,OAAOgQ,EAAQ,GACrBxB,EAAaxO,OAAOgQ,EAAQ,GAC5BH,EAAWxB,KAAKyB,IAAIP,EAAMtT,OAAQuT,EAAMvT,QACxC+T,GAAU,EACVD,GAAU,OAEW,IAAlBP,EAAMO,GAGb/M,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOmB,gBAEvB7D,SACGtB,KAAKY,QAAQoD,OAAOa,SACpBuD,EAAU/F,IAEbf,SACGtB,KAAKY,QAAQoD,OAAOS,SACpB2D,EAAU8J,EAAasB,KAE1BlS,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,MAMzBhN,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAO4B,eAEvBtE,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,IAEhBnS,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAU/F,KAGtB2Q,EAAMvP,OAAOgQ,EAAQ,GACrBxB,EAAaxO,OAAOgQ,EAAQ,GAC5BH,EAAWxB,KAAKyB,IAAIP,EAAMtT,OAAQuT,EAAMvT,QACxC+T,GAAU,EACVD,GAAU,QAEX,IAAsB,IAAlBP,EAAMO,GAES,WADtBnR,EAAO6P,EAAasB,IACXlR,UACLmE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOE,gBAEvB5C,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,IAEhBnS,SAAStB,KAAKY,QAAQoD,OAAO9C,MAAOmB,EAAKI,OAElDuQ,EAAMvP,OAAOgQ,EAAQ,GAAG,GACxBxB,EAAaxO,OAAOgQ,EAAQ,EAAG,CAC3BnR,SAAU,QACVG,KAAMJ,EAAKI,OAEf6Q,EAAWxB,KAAKyB,IAAIP,EAAMtT,OAAQuT,EAAMvT,UAGxC+G,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOC,YAEvB3C,SACGtB,KAAKY,QAAQoD,OAAOT,MACpBA,EAAM9C,OAAOgT,IAEhBnS,SACGtB,KAAKY,QAAQoD,OAAOtC,QACpB0G,EAAU/F,KAGtB2Q,EAAMvP,OAAOgQ,EAAQ,GAAG,GACxBxB,EAAaxO,OAAOgQ,EAAQ,EAAGrL,EAAU/F,IACzCiR,EAAWxB,KAAKyB,IAAIP,EAAMtT,OAAQuT,EAAMvT,cAGzC,GAAIsT,EAAMS,KAAYR,EAAMO,GAAS,CACxC,GAAI/M,EAAM/G,OAAS,EACf,OAAO+G,EAQX,GALAmM,EAAQJ,EAASQ,EAAMS,KACvBd,EAAUb,KAAKyB,IACXX,EAAMnO,SACNwN,EAAavS,OAASkT,EAAMlT,WAEhBkT,EAAM/N,UAAY8N,GAAW,EAAG,CAE5CD,GAAuB,EACvB,IAAK,IAAIU,EAAI,EAAGA,EAAIR,EAAMlT,OAAQ0T,GAAK,EAE9BrK,EACGkJ,EAAaU,EAAUS,GACvBnB,EAAaW,EAAM/N,SAAWuO,GAC9B,CAAE,GACF,GACA,KAGJV,GAAuB,GAG/B,GAAIA,EACA,MAAO,EACH,IAAI/R,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOsB,eAEvBhE,SACGtB,KAAKY,QAAQoD,OAAOuB,YACpBqN,EAAMlT,QAET4B,SACGtB,KAAKY,QAAQoD,OAAO7D,KACpByS,EAAM/N,UAETvD,SAAStB,KAAKY,QAAQoD,OAAO9D,GAAIyS,GACjCrR,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,GAGpD,CACJ,OAEL,OAAOkD,GAGXwJ,EAAArQ,UAAA6R,cAAA,SACIrB,EACAG,EACAhN,GAKA,IAAMkD,EAAQ,GA4Cd,OA1CI2J,EAAG/M,WAAakN,EAAGlN,UACnBoD,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOkB,gBAEvB5D,SAAStB,KAAKY,QAAQoD,OAAOa,SAAUuL,EAAG/M,UAC1C/B,SAAStB,KAAKY,QAAQoD,OAAOS,SAAU8L,EAAGlN,UAC1C/B,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,KAK5C6M,EAAGlP,OAASqP,EAAGrP,QAChBkP,EAAGlP,QAAUqP,EAAGrP,OACA,WAAhBkP,EAAG9N,UAEHmE,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOe,aAEvBzD,SAAStB,KAAKY,QAAQoD,OAAOa,SAAUuL,EAAGlP,OAAS,IACnDI,SAAStB,KAAKY,QAAQoD,OAAOS,SAAU8L,EAAGrP,OAAS,IACnDI,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,IAG7C6M,EAAGhN,UAAYmN,EAAGnN,SAClBqD,EAAMM,MACF,IAAIpG,GACCW,SACGtB,KAAKY,QAAQoD,OAAOD,OACpB/D,KAAKY,QAAQoD,OAAOiB,eAEvB3D,SAAStB,KAAKY,QAAQoD,OAAOa,SAAUuL,EAAGhN,SAC1C9B,SAAStB,KAAKY,QAAQoD,OAAOS,SAAU8L,EAAGnN,SAC1C9B,SAAStB,KAAKY,QAAQoD,OAAOT,MAAOA,IAI1CkD,GAEdwJ,CAAD,ICx0BM0D,EAAkB,CACpBjD,OAAO,EACPM,QAAS,GACTK,UAAU,EACViB,cAAe,GACfnP,cAAc,EAEdyB,kBACIvC,EACAuR,EACAC,EACApP,GAEApC,EAAKI,KAAOgC,CAEf,EAGDqH,+BAAwB,EACxBM,gCAAyB,EACzB/H,wBAAiB,EACjB6B,yBAAkB,EAClBqL,gBAAiB,KACjBuC,UAAU,EACV9P,QAAQ,EACRzB,WACsB,oBAAXwR,SAA0BA,OAAOxR,WAClCwR,OAAOxR,SAEjByR,WAAY,IAGhBC,EAAA,WAEI,SAAAA,EAAYrT,GASR,QATQ,IAAAA,IAAAA,EAAmC,CAAA,GAG3CzB,OAAO2B,QAAQ6S,GAAiB5S,SAAQ,SAACC,OAACC,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GAC3C7B,OAAOS,UAAUC,eAAeC,KAAKc,EAASK,KAC/CL,EAAQK,GAAOC,EAEvB,KAEKN,EAAQoD,OAAQ,CACjB,IAAMkQ,EAAW,CACb,eACA,kBACA,kBACA,oBACA,gBACA,gBACA,aACA,oBACA,iBACA,iBACA,cACA,gBACA,iBACA,gBACA,SACA,QACA,WACA,WACA,UACA,QACA,cACA,OACA,KACA,OACA,QACA,OACA,aACA,WACA,aACA,UACA,YAEEC,EAAgC,CAAA,EAClCvT,EAAQkT,SACRI,EAASnT,SACL,SAACqT,EAAS1O,GAAU,OAACyO,EAAWC,GAAW1O,CAAvB,IAGxBwO,EAASnT,SAAQ,SAACqT,GAAY,OAACD,EAAWC,GAAWA,CAAvB,IAElCxT,EAAQoD,OAASmQ,CACpB,CAEDnU,KAAKY,QAAUA,CAClB,CAiBL,OAfIqT,EAAArU,UAAAG,MAAA,SAAM4D,EAAe8C,GACjB,gBPiHJ9C,EACA8C,EACA7F,GAEA,OAAO6F,EAAM0B,OAAM,SAACvE,GAChB,OAAAF,EAAUC,EAAMC,EAAkBhD,EAAlC,GAER,COxHeyT,CAAS1Q,EAAM8C,EAAOzG,KAAKY,UAGtCqT,EAAArU,UAAA0U,KAAA,SAAK3Q,EAAe8C,GAChB,OAAOD,EAAQ7C,EAAM8C,EAAOzG,KAAKY,UAGrCqT,EAAArU,UAAAgE,KAAA,SACIsM,EACAC,GAGA,OADe,IAAIF,EAAWC,EAAQC,EAAQnQ,KAAKY,SACrCkQ,QAErBmD,CAAD,ICrGAM,EAAA,WAKI,SAAAA,EAAYnO,QAAA,IAAAA,IAAAA,EAAQ,CAAA,GAApB,IAiCCvF,EAAAb,KAhCGA,KAAKwU,IAAM,OACXxU,KAAKyU,QAAU,GACfzU,KAAK0U,KAAO,EACZ1U,KAAK2U,SAAW,GAChB,IAAMC,EAAU,SAACxO,EAAanF,GAE1B,IAAM4T,EAAQzO,EAAInF,GAClBmF,EAAInF,GAAO,+BAUK6T,EAAA,GAAAlT,EAAA,EATZA,EASYnC,UAAAC,OATZkC,IAAAkT,EASYlT,GAAAnC,EAAAmC,GAEZf,EAAKkU,IAAI9T,EAAKV,MAAMX,UAAUY,MAAMV,KAAKgV,IACzC,IAAMlG,EAASiG,EAAM9U,MAAMqG,EAAK0O,GAEhC,OADAjU,EAAKmU,KAAK/T,EAAK2N,GACRA,CACX,CACJ,EAEA,IAAK,IAAI3N,KAAOmF,EACY,mBAAbA,EAAInF,IACX2T,EAAQxO,EAAKnF,GAGrBjB,KAAKiG,IAAI,mBACZ,CAqFL,OAnFIsO,EAAA3U,UAAAmV,IAAA,SACIxJ,EACAuJ,GAQA9U,KAAKyU,SAAWzU,KAAKwU,IACrBxU,KAAKiG,IAAI,gBAAAxF,OAAgB8K,GAAMuJ,IAGnCP,EAAA3U,UAAAoV,KAAA,SACIzJ,EACAqD,GAQA5O,KAAKiG,IAAI,+BAAgC2I,GACzC5O,KAAKyU,QAAUzU,KAAKyU,QAAQrF,UACxB,EACApP,KAAKyU,QAAQ/U,OAASM,KAAKwU,IAAI9U,SAIvC6U,EAAA3U,UAAAqV,OAAA,SAAO3V,EAAWoV,GAQd,MAAO,GAAGjU,OAPD,SAAUpB,GAEf,IADA,IAAI6V,EAAO,GAAGzU,OAAApB,GACP6V,EAAKxV,OAAS,GACjBwV,EAAO,IAAAzU,OAAIpB,GAEf,OAAO6V,CACX,CACUC,CAAGT,GAAK,MAAAjU,OAAKT,KAAKyU,SAAOhU,OAAGnB,IAG1CiV,EAAA3U,UAAAqG,IAAA,+BAAW6O,EAAA,GAAAlT,EAAA,EAAPA,EAAOnC,UAAAC,OAAPkC,IAAAkT,EAAOlT,GAAAnC,EAAAmC,GACP,IAAMwT,EAAiB,SACnB9L,GAQA,OAAKA,EAGY,iBAANA,EACAA,EAEP7H,EAAiB6H,EAAG,eACZA,EAAkB+L,WAAa,UAEvC/L,aAAa/I,MACN,IAAIE,OAAA6I,EAAE9D,IAAI4P,GAAgBE,KAAK,UAEnChM,EAAEnI,YAAcmI,EAAEiM,WAAa,YAX3B,UAYf,EACMjW,EAAIwV,EAAKtP,IAAI4P,GAAgBE,KAAK,MACxCtV,KAAK2U,SAAS5N,KAAK/G,KAAKiV,OAAO3V,EAAGU,KAAK0U,UAI3CH,EAAA3U,UAAAuB,SAAA,WAGI,IAFA,IACIqU,EAAa,OACVA,EAAW9V,QAAUM,KAAKyU,QAAQ/U,OAASM,KAAKwU,IAAI9U,QACvD8V,GAHM,OAKV,IAAIC,EAAIzV,KAAKyU,QAIb,OAHAzU,KAAKyU,QAAU,GACfe,EAAaxV,KAAKiV,OAAOO,EAAYxV,KAAK0U,MAC1C1U,KAAKyU,QAAUgB,EACR,GAAGhV,OAAAT,KAAK2U,SAASW,KAAK,MAAK,MAAA7U,OAAK+U,IAE9CjB,CAAD","x_google_ignoreList":[0]}